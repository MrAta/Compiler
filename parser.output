Terminals unused in grammar

   SIZEOF
   NEG


Grammar

    0 $accept: program $end

    1 program: %empty
    2        | var_dcl program
    3        | func_dcl program
    4        | start program
    5        | finish program

    6 start: START id

    7 finish: FINISH id

    8 var_dcl: id ts_dcl

    9 ts_dcl: LBRACK type ts_dcl1 RBRACK
   10       | LBRACK type LT const_int GT ts_dcl1 RBRACK

   11 ts_dcl1: %empty
   12        | COMMA type LT const_int GT ts_dcl1
   13        | COMMA type ts_dcl1

   14 func_dcl: id COLON INDENT block UNINDENT
   15         | ts_dcl id var_dcl func_dcl1 COLON INDENT block UNINDENT
   16         | ts_dcl id COLON INDENT block UNINDENT
   17         | id var_dcl func_dcl1 COLON INDENT block UNINDENT

   18 func_dcl1: %empty
   19          | COMMA var_dcl func_dcl1

   20 block: %empty
   21      | var_dcl block
   22      | statement block

   23 statement: assignment
   24          | func_call
   25          | cond_stmt
   26          | loop_stmt
   27          | return_stmt
   28          | BREAK
   29          | CONTINUE

   30 assignment: id EQ expr expr1
   31           | id LBRACK expr expr1 RBRACK EQ expr expr1
   32           | var_dcl EQ expr expr1

   33 expr1: %empty
   34      | COMMA expr expr1

   35 func_call: id func_param

   36 func_param: LPAREN RPAREN
   37           | LPAREN expr func_param1 RPAREN

   38 func_param1: %empty
   39            | COMMA expr func_param1

   40 cond_stmt: IF expr COLON INDENT block UNINDENT cond_stmt1
   41          | IF expr COLON INDENT block UNINDENT cond_stmt1 ELSE COLON INDENT block UNINDENT
   42          | CASE expr COLON INDENT cond_stmt2 UNINDENT
   43          | CASE expr COLON INDENT cond_stmt2 DEFAULT COLON INDENT block UNINDENT UNINDENT

   44 cond_stmt1: %empty
   45           | ELIF expr COLON INDENT block UNINDENT cond_stmt1

   46 cond_stmt2: %empty
   47           | const_val COLON INDENT block UNINDENT cond_stmt2

   48 loop_stmt: FOR id IN loop_stmt1 COLON INDENT block UNINDENT
   49          | WHILE expr COLON INDENT block UNINDENT

   50 loop_stmt1: %empty
   51           | id
   52           | RANGE loop_stmt2
   53           | RANGE loop_stmt2 TO loop_stmt2

   54 loop_stmt2: const_int
   55           | id

   56 return_stmt: RETURN
   57            | RETURN id id1

   58 id1: %empty
   59    | COMMA id id1

   60 expr: LPAREN expr RPAREN
   61     | bin_op
   62     | func_call
   63     | id
   64     | id LBRACK expr RBRACK
   65     | const_val
   66     | MINUS expr
   67     | NOT expr
   68     | COMP expr

   69 bin_op: expr PLUS expr
   70       | expr MINUS expr
   71       | expr MULT expr
   72       | expr DIV expr
   73       | expr MOD expr
   74       | expr AND expr
   75       | expr OR expr
   76       | expr XOR expr
   77       | expr OROR expr
   78       | expr ANDAND expr
   79       | expr EQEQ expr
   80       | expr NOTEQ expr
   81       | expr GTEQ expr
   82       | expr LTEQ expr
   83       | expr LT expr
   84       | expr GT expr

   85 const_val: const_int
   86          | CONST_REAL
   87          | CONST_CHAR
   88          | TRUE
   89          | FALSE
   90          | CONST_STRING
   91          | CONST_LONG

   92 type: BOOL
   93     | INT
   94     | LONG
   95     | CHAR
   96     | REAL
   97     | STRING

   98 const_int: CONST_INT

   99 id: ID


Terminals, with rules where they appear

$end (0) 0
error (256)
INDENT (258) 14 15 16 17 40 41 42 43 45 47 48 49
UNINDENT (259) 14 15 16 17 40 41 42 43 45 47 48 49
LBRACK (260) 9 10 31 64
RBRACK (261) 9 10 31 64
START (262) 6
FINISH (263) 7
WHILE (264) 49
FOR (265) 48
IN (266) 48
RANGE (267) 52 53
TO (268) 53
BREAK (269) 28
CONTINUE (270) 29
IF (271) 40 41
ELSE (272) 41
ELIF (273) 45
CASE (274) 42 43
DEFAULT (275) 43
RETURN (276) 56 57
COLON (277) 14 15 16 17 40 41 42 43 45 47 48 49
NOT (278) 67
COMMA (279) 12 13 19 34 39 59
EQ (280) 30 31 32
OROR (281) 77
ANDAND (282) 78
OR (283) 75
XOR (284) 76
AND (285) 74
EQEQ (286) 79
NOTEQ (287) 80
LT (288) 10 12 83
LTEQ (289) 82
GT (290) 10 12 84
GTEQ (291) 81
PLUS (292) 69
MINUS (293) 66 70
MULT (294) 71
DIV (295) 72
MOD (296) 73
SIZEOF (297)
NEG (298)
COMP (299) 68
LPAREN (300) 36 37 60
RPAREN (301) 36 37 60
BOOL (302) 92
INT (303) 93
LONG (304) 94
CHAR (305) 95
REAL (306) 96
STRING (307) 97
ID (308) 99
CONST_INT (309) 98
CONST_REAL (310) 86
CONST_CHAR (311) 87
CONST_STRING (312) 90
CONST_LONG (313) 91
TRUE (314) 88
FALSE (315) 89


Nonterminals, with rules where they appear

$accept (61)
    on left: 0
program (62)
    on left: 1 2 3 4 5, on right: 0 2 3 4 5
start (63)
    on left: 6, on right: 4
finish (64)
    on left: 7, on right: 5
var_dcl (65)
    on left: 8, on right: 2 15 17 19 21 32
ts_dcl (66)
    on left: 9 10, on right: 8 15 16
ts_dcl1 (67)
    on left: 11 12 13, on right: 9 10 12 13
func_dcl (68)
    on left: 14 15 16 17, on right: 3
func_dcl1 (69)
    on left: 18 19, on right: 15 17 19
block (70)
    on left: 20 21 22, on right: 14 15 16 17 21 22 40 41 43 45 47 48
    49
statement (71)
    on left: 23 24 25 26 27 28 29, on right: 22
assignment (72)
    on left: 30 31 32, on right: 23
expr1 (73)
    on left: 33 34, on right: 30 31 32 34
func_call (74)
    on left: 35, on right: 24 62
func_param (75)
    on left: 36 37, on right: 35
func_param1 (76)
    on left: 38 39, on right: 37 39
cond_stmt (77)
    on left: 40 41 42 43, on right: 25
cond_stmt1 (78)
    on left: 44 45, on right: 40 41 45
cond_stmt2 (79)
    on left: 46 47, on right: 42 43 47
loop_stmt (80)
    on left: 48 49, on right: 26
loop_stmt1 (81)
    on left: 50 51 52 53, on right: 48
loop_stmt2 (82)
    on left: 54 55, on right: 52 53
return_stmt (83)
    on left: 56 57, on right: 27
id1 (84)
    on left: 58 59, on right: 57 59
expr (85)
    on left: 60 61 62 63 64 65 66 67 68, on right: 30 31 32 34 37 39
    40 41 42 43 45 49 60 64 66 67 68 69 70 71 72 73 74 75 76 77 78
    79 80 81 82 83 84
bin_op (86)
    on left: 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84, on right:
    61
const_val (87)
    on left: 85 86 87 88 89 90 91, on right: 47 65
type (88)
    on left: 92 93 94 95 96 97, on right: 9 10 12 13
const_int (89)
    on left: 98, on right: 10 12 54 85
id (90)
    on left: 99, on right: 6 7 8 14 15 16 17 30 31 35 48 51 55 57 59
    63 64


State 0

    0 $accept: . program $end

    LBRACK  shift, and go to state 1
    START   shift, and go to state 2
    FINISH  shift, and go to state 3
    ID      shift, and go to state 4

    $default  reduce using rule 1 (program)

    program   go to state 5
    start     go to state 6
    finish    go to state 7
    var_dcl   go to state 8
    ts_dcl    go to state 9
    func_dcl  go to state 10
    id        go to state 11


State 1

    9 ts_dcl: LBRACK . type ts_dcl1 RBRACK
   10       | LBRACK . type LT const_int GT ts_dcl1 RBRACK

    BOOL    shift, and go to state 12
    INT     shift, and go to state 13
    LONG    shift, and go to state 14
    CHAR    shift, and go to state 15
    REAL    shift, and go to state 16
    STRING  shift, and go to state 17

    type  go to state 18


State 2

    6 start: START . id

    ID  shift, and go to state 4

    id  go to state 19


State 3

    7 finish: FINISH . id

    ID  shift, and go to state 4

    id  go to state 20


State 4

   99 id: ID .

    $default  reduce using rule 99 (id)


State 5

    0 $accept: program . $end

    $end  shift, and go to state 21


State 6

    4 program: start . program

    LBRACK  shift, and go to state 1
    START   shift, and go to state 2
    FINISH  shift, and go to state 3
    ID      shift, and go to state 4

    $default  reduce using rule 1 (program)

    program   go to state 22
    start     go to state 6
    finish    go to state 7
    var_dcl   go to state 8
    ts_dcl    go to state 9
    func_dcl  go to state 10
    id        go to state 11


State 7

    5 program: finish . program

    LBRACK  shift, and go to state 1
    START   shift, and go to state 2
    FINISH  shift, and go to state 3
    ID      shift, and go to state 4

    $default  reduce using rule 1 (program)

    program   go to state 23
    start     go to state 6
    finish    go to state 7
    var_dcl   go to state 8
    ts_dcl    go to state 9
    func_dcl  go to state 10
    id        go to state 11


State 8

    2 program: var_dcl . program

    LBRACK  shift, and go to state 1
    START   shift, and go to state 2
    FINISH  shift, and go to state 3
    ID      shift, and go to state 4

    $default  reduce using rule 1 (program)

    program   go to state 24
    start     go to state 6
    finish    go to state 7
    var_dcl   go to state 8
    ts_dcl    go to state 9
    func_dcl  go to state 10
    id        go to state 11


State 9

   15 func_dcl: ts_dcl . id var_dcl func_dcl1 COLON INDENT block UNINDENT
   16         | ts_dcl . id COLON INDENT block UNINDENT

    ID  shift, and go to state 4

    id  go to state 25


State 10

    3 program: func_dcl . program

    LBRACK  shift, and go to state 1
    START   shift, and go to state 2
    FINISH  shift, and go to state 3
    ID      shift, and go to state 4

    $default  reduce using rule 1 (program)

    program   go to state 26
    start     go to state 6
    finish    go to state 7
    var_dcl   go to state 8
    ts_dcl    go to state 9
    func_dcl  go to state 10
    id        go to state 11


State 11

    8 var_dcl: id . ts_dcl
   14 func_dcl: id . COLON INDENT block UNINDENT
   17         | id . var_dcl func_dcl1 COLON INDENT block UNINDENT

    LBRACK  shift, and go to state 1
    COLON   shift, and go to state 27
    ID      shift, and go to state 4

    var_dcl  go to state 28
    ts_dcl   go to state 29
    id       go to state 30


State 12

   92 type: BOOL .

    $default  reduce using rule 92 (type)


State 13

   93 type: INT .

    $default  reduce using rule 93 (type)


State 14

   94 type: LONG .

    $default  reduce using rule 94 (type)


State 15

   95 type: CHAR .

    $default  reduce using rule 95 (type)


State 16

   96 type: REAL .

    $default  reduce using rule 96 (type)


State 17

   97 type: STRING .

    $default  reduce using rule 97 (type)


State 18

    9 ts_dcl: LBRACK type . ts_dcl1 RBRACK
   10       | LBRACK type . LT const_int GT ts_dcl1 RBRACK

    COMMA  shift, and go to state 31
    LT     shift, and go to state 32

    $default  reduce using rule 11 (ts_dcl1)

    ts_dcl1  go to state 33


State 19

    6 start: START id .

    $default  reduce using rule 6 (start)


State 20

    7 finish: FINISH id .

    $default  reduce using rule 7 (finish)


State 21

    0 $accept: program $end .

    $default  accept


State 22

    4 program: start program .

    $default  reduce using rule 4 (program)


State 23

    5 program: finish program .

    $default  reduce using rule 5 (program)


State 24

    2 program: var_dcl program .

    $default  reduce using rule 2 (program)


State 25

   15 func_dcl: ts_dcl id . var_dcl func_dcl1 COLON INDENT block UNINDENT
   16         | ts_dcl id . COLON INDENT block UNINDENT

    COLON  shift, and go to state 34
    ID     shift, and go to state 4

    var_dcl  go to state 35
    id       go to state 30


State 26

    3 program: func_dcl program .

    $default  reduce using rule 3 (program)


State 27

   14 func_dcl: id COLON . INDENT block UNINDENT

    INDENT  shift, and go to state 36


State 28

   17 func_dcl: id var_dcl . func_dcl1 COLON INDENT block UNINDENT

    COMMA  shift, and go to state 37

    $default  reduce using rule 18 (func_dcl1)

    func_dcl1  go to state 38


State 29

    8 var_dcl: id ts_dcl .

    $default  reduce using rule 8 (var_dcl)


State 30

    8 var_dcl: id . ts_dcl

    LBRACK  shift, and go to state 1

    ts_dcl  go to state 29


State 31

   12 ts_dcl1: COMMA . type LT const_int GT ts_dcl1
   13        | COMMA . type ts_dcl1

    BOOL    shift, and go to state 12
    INT     shift, and go to state 13
    LONG    shift, and go to state 14
    CHAR    shift, and go to state 15
    REAL    shift, and go to state 16
    STRING  shift, and go to state 17

    type  go to state 39


State 32

   10 ts_dcl: LBRACK type LT . const_int GT ts_dcl1 RBRACK

    CONST_INT  shift, and go to state 40

    const_int  go to state 41


State 33

    9 ts_dcl: LBRACK type ts_dcl1 . RBRACK

    RBRACK  shift, and go to state 42


State 34

   16 func_dcl: ts_dcl id COLON . INDENT block UNINDENT

    INDENT  shift, and go to state 43


State 35

   15 func_dcl: ts_dcl id var_dcl . func_dcl1 COLON INDENT block UNINDENT

    COMMA  shift, and go to state 37

    $default  reduce using rule 18 (func_dcl1)

    func_dcl1  go to state 44


State 36

   14 func_dcl: id COLON INDENT . block UNINDENT

    WHILE     shift, and go to state 45
    FOR       shift, and go to state 46
    BREAK     shift, and go to state 47
    CONTINUE  shift, and go to state 48
    IF        shift, and go to state 49
    CASE      shift, and go to state 50
    RETURN    shift, and go to state 51
    ID        shift, and go to state 4

    $default  reduce using rule 20 (block)

    var_dcl      go to state 52
    block        go to state 53
    statement    go to state 54
    assignment   go to state 55
    func_call    go to state 56
    cond_stmt    go to state 57
    loop_stmt    go to state 58
    return_stmt  go to state 59
    id           go to state 60


State 37

   19 func_dcl1: COMMA . var_dcl func_dcl1

    ID  shift, and go to state 4

    var_dcl  go to state 61
    id       go to state 30


State 38

   17 func_dcl: id var_dcl func_dcl1 . COLON INDENT block UNINDENT

    COLON  shift, and go to state 62


State 39

   12 ts_dcl1: COMMA type . LT const_int GT ts_dcl1
   13        | COMMA type . ts_dcl1

    COMMA  shift, and go to state 31
    LT     shift, and go to state 63

    $default  reduce using rule 11 (ts_dcl1)

    ts_dcl1  go to state 64


State 40

   98 const_int: CONST_INT .

    $default  reduce using rule 98 (const_int)


State 41

   10 ts_dcl: LBRACK type LT const_int . GT ts_dcl1 RBRACK

    GT  shift, and go to state 65


State 42

    9 ts_dcl: LBRACK type ts_dcl1 RBRACK .

    $default  reduce using rule 9 (ts_dcl)


State 43

   16 func_dcl: ts_dcl id COLON INDENT . block UNINDENT

    WHILE     shift, and go to state 45
    FOR       shift, and go to state 46
    BREAK     shift, and go to state 47
    CONTINUE  shift, and go to state 48
    IF        shift, and go to state 49
    CASE      shift, and go to state 50
    RETURN    shift, and go to state 51
    ID        shift, and go to state 4

    $default  reduce using rule 20 (block)

    var_dcl      go to state 52
    block        go to state 66
    statement    go to state 54
    assignment   go to state 55
    func_call    go to state 56
    cond_stmt    go to state 57
    loop_stmt    go to state 58
    return_stmt  go to state 59
    id           go to state 60


State 44

   15 func_dcl: ts_dcl id var_dcl func_dcl1 . COLON INDENT block UNINDENT

    COLON  shift, and go to state 67


State 45

   49 loop_stmt: WHILE . expr COLON INDENT block UNINDENT

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 79
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 46

   48 loop_stmt: FOR . id IN loop_stmt1 COLON INDENT block UNINDENT

    ID  shift, and go to state 4

    id  go to state 84


State 47

   28 statement: BREAK .

    $default  reduce using rule 28 (statement)


State 48

   29 statement: CONTINUE .

    $default  reduce using rule 29 (statement)


State 49

   40 cond_stmt: IF . expr COLON INDENT block UNINDENT cond_stmt1
   41          | IF . expr COLON INDENT block UNINDENT cond_stmt1 ELSE COLON INDENT block UNINDENT

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 85
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 50

   42 cond_stmt: CASE . expr COLON INDENT cond_stmt2 UNINDENT
   43          | CASE . expr COLON INDENT cond_stmt2 DEFAULT COLON INDENT block UNINDENT UNINDENT

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 86
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 51

   56 return_stmt: RETURN .
   57            | RETURN . id id1

    ID  shift, and go to state 4

    $default  reduce using rule 56 (return_stmt)

    id  go to state 87


State 52

   21 block: var_dcl . block
   32 assignment: var_dcl . EQ expr expr1

    WHILE     shift, and go to state 45
    FOR       shift, and go to state 46
    BREAK     shift, and go to state 47
    CONTINUE  shift, and go to state 48
    IF        shift, and go to state 49
    CASE      shift, and go to state 50
    RETURN    shift, and go to state 51
    EQ        shift, and go to state 88
    ID        shift, and go to state 4

    $default  reduce using rule 20 (block)

    var_dcl      go to state 52
    block        go to state 89
    statement    go to state 54
    assignment   go to state 55
    func_call    go to state 56
    cond_stmt    go to state 57
    loop_stmt    go to state 58
    return_stmt  go to state 59
    id           go to state 60


State 53

   14 func_dcl: id COLON INDENT block . UNINDENT

    UNINDENT  shift, and go to state 90


State 54

   22 block: statement . block

    WHILE     shift, and go to state 45
    FOR       shift, and go to state 46
    BREAK     shift, and go to state 47
    CONTINUE  shift, and go to state 48
    IF        shift, and go to state 49
    CASE      shift, and go to state 50
    RETURN    shift, and go to state 51
    ID        shift, and go to state 4

    $default  reduce using rule 20 (block)

    var_dcl      go to state 52
    block        go to state 91
    statement    go to state 54
    assignment   go to state 55
    func_call    go to state 56
    cond_stmt    go to state 57
    loop_stmt    go to state 58
    return_stmt  go to state 59
    id           go to state 60


State 55

   23 statement: assignment .

    $default  reduce using rule 23 (statement)


State 56

   24 statement: func_call .

    $default  reduce using rule 24 (statement)


State 57

   25 statement: cond_stmt .

    $default  reduce using rule 25 (statement)


State 58

   26 statement: loop_stmt .

    $default  reduce using rule 26 (statement)


State 59

   27 statement: return_stmt .

    $default  reduce using rule 27 (statement)


State 60

    8 var_dcl: id . ts_dcl
   30 assignment: id . EQ expr expr1
   31           | id . LBRACK expr expr1 RBRACK EQ expr expr1
   35 func_call: id . func_param

    LBRACK  shift, and go to state 92
    EQ      shift, and go to state 93
    LPAREN  shift, and go to state 94

    ts_dcl      go to state 29
    func_param  go to state 95


State 61

   19 func_dcl1: COMMA var_dcl . func_dcl1

    COMMA  shift, and go to state 37

    $default  reduce using rule 18 (func_dcl1)

    func_dcl1  go to state 96


State 62

   17 func_dcl: id var_dcl func_dcl1 COLON . INDENT block UNINDENT

    INDENT  shift, and go to state 97


State 63

   12 ts_dcl1: COMMA type LT . const_int GT ts_dcl1

    CONST_INT  shift, and go to state 40

    const_int  go to state 98


State 64

   13 ts_dcl1: COMMA type ts_dcl1 .

    $default  reduce using rule 13 (ts_dcl1)


State 65

   10 ts_dcl: LBRACK type LT const_int GT . ts_dcl1 RBRACK

    COMMA  shift, and go to state 31

    $default  reduce using rule 11 (ts_dcl1)

    ts_dcl1  go to state 99


State 66

   16 func_dcl: ts_dcl id COLON INDENT block . UNINDENT

    UNINDENT  shift, and go to state 100


State 67

   15 func_dcl: ts_dcl id var_dcl func_dcl1 COLON . INDENT block UNINDENT

    INDENT  shift, and go to state 101


State 68

   67 expr: NOT . expr

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 102
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 69

   66 expr: MINUS . expr

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 103
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 70

   68 expr: COMP . expr

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 104
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 71

   60 expr: LPAREN . expr RPAREN

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 105
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 72

   86 const_val: CONST_REAL .

    $default  reduce using rule 86 (const_val)


State 73

   87 const_val: CONST_CHAR .

    $default  reduce using rule 87 (const_val)


State 74

   90 const_val: CONST_STRING .

    $default  reduce using rule 90 (const_val)


State 75

   91 const_val: CONST_LONG .

    $default  reduce using rule 91 (const_val)


State 76

   88 const_val: TRUE .

    $default  reduce using rule 88 (const_val)


State 77

   89 const_val: FALSE .

    $default  reduce using rule 89 (const_val)


State 78

   62 expr: func_call .

    $default  reduce using rule 62 (expr)


State 79

   49 loop_stmt: WHILE expr . COLON INDENT block UNINDENT
   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    COLON   shift, and go to state 106
    OROR    shift, and go to state 107
    ANDAND  shift, and go to state 108
    OR      shift, and go to state 109
    XOR     shift, and go to state 110
    AND     shift, and go to state 111
    EQEQ    shift, and go to state 112
    NOTEQ   shift, and go to state 113
    LT      shift, and go to state 114
    LTEQ    shift, and go to state 115
    GT      shift, and go to state 116
    GTEQ    shift, and go to state 117
    PLUS    shift, and go to state 118
    MINUS   shift, and go to state 119
    MULT    shift, and go to state 120
    DIV     shift, and go to state 121
    MOD     shift, and go to state 122


State 80

   61 expr: bin_op .

    $default  reduce using rule 61 (expr)


State 81

   65 expr: const_val .

    $default  reduce using rule 65 (expr)


State 82

   85 const_val: const_int .

    $default  reduce using rule 85 (const_val)


State 83

   35 func_call: id . func_param
   63 expr: id .
   64     | id . LBRACK expr RBRACK

    LBRACK  shift, and go to state 123
    LPAREN  shift, and go to state 94

    $default  reduce using rule 63 (expr)

    func_param  go to state 95


State 84

   48 loop_stmt: FOR id . IN loop_stmt1 COLON INDENT block UNINDENT

    IN  shift, and go to state 124


State 85

   40 cond_stmt: IF expr . COLON INDENT block UNINDENT cond_stmt1
   41          | IF expr . COLON INDENT block UNINDENT cond_stmt1 ELSE COLON INDENT block UNINDENT
   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    COLON   shift, and go to state 125
    OROR    shift, and go to state 107
    ANDAND  shift, and go to state 108
    OR      shift, and go to state 109
    XOR     shift, and go to state 110
    AND     shift, and go to state 111
    EQEQ    shift, and go to state 112
    NOTEQ   shift, and go to state 113
    LT      shift, and go to state 114
    LTEQ    shift, and go to state 115
    GT      shift, and go to state 116
    GTEQ    shift, and go to state 117
    PLUS    shift, and go to state 118
    MINUS   shift, and go to state 119
    MULT    shift, and go to state 120
    DIV     shift, and go to state 121
    MOD     shift, and go to state 122


State 86

   42 cond_stmt: CASE expr . COLON INDENT cond_stmt2 UNINDENT
   43          | CASE expr . COLON INDENT cond_stmt2 DEFAULT COLON INDENT block UNINDENT UNINDENT
   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    COLON   shift, and go to state 126
    OROR    shift, and go to state 107
    ANDAND  shift, and go to state 108
    OR      shift, and go to state 109
    XOR     shift, and go to state 110
    AND     shift, and go to state 111
    EQEQ    shift, and go to state 112
    NOTEQ   shift, and go to state 113
    LT      shift, and go to state 114
    LTEQ    shift, and go to state 115
    GT      shift, and go to state 116
    GTEQ    shift, and go to state 117
    PLUS    shift, and go to state 118
    MINUS   shift, and go to state 119
    MULT    shift, and go to state 120
    DIV     shift, and go to state 121
    MOD     shift, and go to state 122


State 87

   57 return_stmt: RETURN id . id1

    COMMA  shift, and go to state 127

    $default  reduce using rule 58 (id1)

    id1  go to state 128


State 88

   32 assignment: var_dcl EQ . expr expr1

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 129
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 89

   21 block: var_dcl block .

    $default  reduce using rule 21 (block)


State 90

   14 func_dcl: id COLON INDENT block UNINDENT .

    $default  reduce using rule 14 (func_dcl)


State 91

   22 block: statement block .

    $default  reduce using rule 22 (block)


State 92

    9 ts_dcl: LBRACK . type ts_dcl1 RBRACK
   10       | LBRACK . type LT const_int GT ts_dcl1 RBRACK
   31 assignment: id LBRACK . expr expr1 RBRACK EQ expr expr1

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    BOOL          shift, and go to state 12
    INT           shift, and go to state 13
    LONG          shift, and go to state 14
    CHAR          shift, and go to state 15
    REAL          shift, and go to state 16
    STRING        shift, and go to state 17
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 130
    bin_op     go to state 80
    const_val  go to state 81
    type       go to state 18
    const_int  go to state 82
    id         go to state 83


State 93

   30 assignment: id EQ . expr expr1

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 131
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 94

   36 func_param: LPAREN . RPAREN
   37           | LPAREN . expr func_param1 RPAREN

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    RPAREN        shift, and go to state 132
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 133
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 95

   35 func_call: id func_param .

    $default  reduce using rule 35 (func_call)


State 96

   19 func_dcl1: COMMA var_dcl func_dcl1 .

    $default  reduce using rule 19 (func_dcl1)


State 97

   17 func_dcl: id var_dcl func_dcl1 COLON INDENT . block UNINDENT

    WHILE     shift, and go to state 45
    FOR       shift, and go to state 46
    BREAK     shift, and go to state 47
    CONTINUE  shift, and go to state 48
    IF        shift, and go to state 49
    CASE      shift, and go to state 50
    RETURN    shift, and go to state 51
    ID        shift, and go to state 4

    $default  reduce using rule 20 (block)

    var_dcl      go to state 52
    block        go to state 134
    statement    go to state 54
    assignment   go to state 55
    func_call    go to state 56
    cond_stmt    go to state 57
    loop_stmt    go to state 58
    return_stmt  go to state 59
    id           go to state 60


State 98

   12 ts_dcl1: COMMA type LT const_int . GT ts_dcl1

    GT  shift, and go to state 135


State 99

   10 ts_dcl: LBRACK type LT const_int GT ts_dcl1 . RBRACK

    RBRACK  shift, and go to state 136


State 100

   16 func_dcl: ts_dcl id COLON INDENT block UNINDENT .

    $default  reduce using rule 16 (func_dcl)


State 101

   15 func_dcl: ts_dcl id var_dcl func_dcl1 COLON INDENT . block UNINDENT

    WHILE     shift, and go to state 45
    FOR       shift, and go to state 46
    BREAK     shift, and go to state 47
    CONTINUE  shift, and go to state 48
    IF        shift, and go to state 49
    CASE      shift, and go to state 50
    RETURN    shift, and go to state 51
    ID        shift, and go to state 4

    $default  reduce using rule 20 (block)

    var_dcl      go to state 52
    block        go to state 137
    statement    go to state 54
    assignment   go to state 55
    func_call    go to state 56
    cond_stmt    go to state 57
    loop_stmt    go to state 58
    return_stmt  go to state 59
    id           go to state 60


State 102

   67 expr: NOT expr .
   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    $default  reduce using rule 67 (expr)


State 103

   66 expr: MINUS expr .
   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    OR    shift, and go to state 109
    XOR   shift, and go to state 110
    AND   shift, and go to state 111
    MULT  shift, and go to state 120
    DIV   shift, and go to state 121
    MOD   shift, and go to state 122

    $default  reduce using rule 66 (expr)


State 104

   68 expr: COMP expr .
   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    $default  reduce using rule 68 (expr)


State 105

   60 expr: LPAREN expr . RPAREN
   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    OROR    shift, and go to state 107
    ANDAND  shift, and go to state 108
    OR      shift, and go to state 109
    XOR     shift, and go to state 110
    AND     shift, and go to state 111
    EQEQ    shift, and go to state 112
    NOTEQ   shift, and go to state 113
    LT      shift, and go to state 114
    LTEQ    shift, and go to state 115
    GT      shift, and go to state 116
    GTEQ    shift, and go to state 117
    PLUS    shift, and go to state 118
    MINUS   shift, and go to state 119
    MULT    shift, and go to state 120
    DIV     shift, and go to state 121
    MOD     shift, and go to state 122
    RPAREN  shift, and go to state 138


State 106

   49 loop_stmt: WHILE expr COLON . INDENT block UNINDENT

    INDENT  shift, and go to state 139


State 107

   77 bin_op: expr OROR . expr

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 140
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 108

   78 bin_op: expr ANDAND . expr

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 141
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 109

   75 bin_op: expr OR . expr

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 142
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 110

   76 bin_op: expr XOR . expr

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 143
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 111

   74 bin_op: expr AND . expr

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 144
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 112

   79 bin_op: expr EQEQ . expr

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 145
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 113

   80 bin_op: expr NOTEQ . expr

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 146
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 114

   83 bin_op: expr LT . expr

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 147
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 115

   82 bin_op: expr LTEQ . expr

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 148
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 116

   84 bin_op: expr GT . expr

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 149
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 117

   81 bin_op: expr GTEQ . expr

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 150
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 118

   69 bin_op: expr PLUS . expr

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 151
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 119

   70 bin_op: expr MINUS . expr

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 152
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 120

   71 bin_op: expr MULT . expr

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 153
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 121

   72 bin_op: expr DIV . expr

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 154
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 122

   73 bin_op: expr MOD . expr

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 155
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 123

   64 expr: id LBRACK . expr RBRACK

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 156
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 124

   48 loop_stmt: FOR id IN . loop_stmt1 COLON INDENT block UNINDENT

    RANGE  shift, and go to state 157
    ID     shift, and go to state 4

    $default  reduce using rule 50 (loop_stmt1)

    loop_stmt1  go to state 158
    id          go to state 159


State 125

   40 cond_stmt: IF expr COLON . INDENT block UNINDENT cond_stmt1
   41          | IF expr COLON . INDENT block UNINDENT cond_stmt1 ELSE COLON INDENT block UNINDENT

    INDENT  shift, and go to state 160


State 126

   42 cond_stmt: CASE expr COLON . INDENT cond_stmt2 UNINDENT
   43          | CASE expr COLON . INDENT cond_stmt2 DEFAULT COLON INDENT block UNINDENT UNINDENT

    INDENT  shift, and go to state 161


State 127

   59 id1: COMMA . id id1

    ID  shift, and go to state 4

    id  go to state 162


State 128

   57 return_stmt: RETURN id id1 .

    $default  reduce using rule 57 (return_stmt)


State 129

   32 assignment: var_dcl EQ expr . expr1
   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    COMMA   shift, and go to state 163
    OROR    shift, and go to state 107
    ANDAND  shift, and go to state 108
    OR      shift, and go to state 109
    XOR     shift, and go to state 110
    AND     shift, and go to state 111
    EQEQ    shift, and go to state 112
    NOTEQ   shift, and go to state 113
    LT      shift, and go to state 114
    LTEQ    shift, and go to state 115
    GT      shift, and go to state 116
    GTEQ    shift, and go to state 117
    PLUS    shift, and go to state 118
    MINUS   shift, and go to state 119
    MULT    shift, and go to state 120
    DIV     shift, and go to state 121
    MOD     shift, and go to state 122

    $default  reduce using rule 33 (expr1)

    expr1  go to state 164


State 130

   31 assignment: id LBRACK expr . expr1 RBRACK EQ expr expr1
   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    COMMA   shift, and go to state 163
    OROR    shift, and go to state 107
    ANDAND  shift, and go to state 108
    OR      shift, and go to state 109
    XOR     shift, and go to state 110
    AND     shift, and go to state 111
    EQEQ    shift, and go to state 112
    NOTEQ   shift, and go to state 113
    LT      shift, and go to state 114
    LTEQ    shift, and go to state 115
    GT      shift, and go to state 116
    GTEQ    shift, and go to state 117
    PLUS    shift, and go to state 118
    MINUS   shift, and go to state 119
    MULT    shift, and go to state 120
    DIV     shift, and go to state 121
    MOD     shift, and go to state 122

    $default  reduce using rule 33 (expr1)

    expr1  go to state 165


State 131

   30 assignment: id EQ expr . expr1
   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    COMMA   shift, and go to state 163
    OROR    shift, and go to state 107
    ANDAND  shift, and go to state 108
    OR      shift, and go to state 109
    XOR     shift, and go to state 110
    AND     shift, and go to state 111
    EQEQ    shift, and go to state 112
    NOTEQ   shift, and go to state 113
    LT      shift, and go to state 114
    LTEQ    shift, and go to state 115
    GT      shift, and go to state 116
    GTEQ    shift, and go to state 117
    PLUS    shift, and go to state 118
    MINUS   shift, and go to state 119
    MULT    shift, and go to state 120
    DIV     shift, and go to state 121
    MOD     shift, and go to state 122

    $default  reduce using rule 33 (expr1)

    expr1  go to state 166


State 132

   36 func_param: LPAREN RPAREN .

    $default  reduce using rule 36 (func_param)


State 133

   37 func_param: LPAREN expr . func_param1 RPAREN
   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    COMMA   shift, and go to state 167
    OROR    shift, and go to state 107
    ANDAND  shift, and go to state 108
    OR      shift, and go to state 109
    XOR     shift, and go to state 110
    AND     shift, and go to state 111
    EQEQ    shift, and go to state 112
    NOTEQ   shift, and go to state 113
    LT      shift, and go to state 114
    LTEQ    shift, and go to state 115
    GT      shift, and go to state 116
    GTEQ    shift, and go to state 117
    PLUS    shift, and go to state 118
    MINUS   shift, and go to state 119
    MULT    shift, and go to state 120
    DIV     shift, and go to state 121
    MOD     shift, and go to state 122

    $default  reduce using rule 38 (func_param1)

    func_param1  go to state 168


State 134

   17 func_dcl: id var_dcl func_dcl1 COLON INDENT block . UNINDENT

    UNINDENT  shift, and go to state 169


State 135

   12 ts_dcl1: COMMA type LT const_int GT . ts_dcl1

    COMMA  shift, and go to state 31

    $default  reduce using rule 11 (ts_dcl1)

    ts_dcl1  go to state 170


State 136

   10 ts_dcl: LBRACK type LT const_int GT ts_dcl1 RBRACK .

    $default  reduce using rule 10 (ts_dcl)


State 137

   15 func_dcl: ts_dcl id var_dcl func_dcl1 COLON INDENT block . UNINDENT

    UNINDENT  shift, and go to state 171


State 138

   60 expr: LPAREN expr RPAREN .

    $default  reduce using rule 60 (expr)


State 139

   49 loop_stmt: WHILE expr COLON INDENT . block UNINDENT

    WHILE     shift, and go to state 45
    FOR       shift, and go to state 46
    BREAK     shift, and go to state 47
    CONTINUE  shift, and go to state 48
    IF        shift, and go to state 49
    CASE      shift, and go to state 50
    RETURN    shift, and go to state 51
    ID        shift, and go to state 4

    $default  reduce using rule 20 (block)

    var_dcl      go to state 52
    block        go to state 172
    statement    go to state 54
    assignment   go to state 55
    func_call    go to state 56
    cond_stmt    go to state 57
    loop_stmt    go to state 58
    return_stmt  go to state 59
    id           go to state 60


State 140

   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   77       | expr OROR expr .
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    OR     shift, and go to state 109
    XOR    shift, and go to state 110
    AND    shift, and go to state 111
    EQEQ   shift, and go to state 112
    NOTEQ  shift, and go to state 113
    LT     shift, and go to state 114
    LTEQ   shift, and go to state 115
    GT     shift, and go to state 116
    GTEQ   shift, and go to state 117
    PLUS   shift, and go to state 118
    MINUS  shift, and go to state 119
    MULT   shift, and go to state 120
    DIV    shift, and go to state 121
    MOD    shift, and go to state 122

    $default  reduce using rule 77 (bin_op)


State 141

   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   78       | expr ANDAND expr .
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    OR     shift, and go to state 109
    XOR    shift, and go to state 110
    AND    shift, and go to state 111
    EQEQ   shift, and go to state 112
    NOTEQ  shift, and go to state 113
    LT     shift, and go to state 114
    LTEQ   shift, and go to state 115
    GT     shift, and go to state 116
    GTEQ   shift, and go to state 117
    PLUS   shift, and go to state 118
    MINUS  shift, and go to state 119
    MULT   shift, and go to state 120
    DIV    shift, and go to state 121
    MOD    shift, and go to state 122

    $default  reduce using rule 78 (bin_op)


State 142

   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   75       | expr OR expr .
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    $default  reduce using rule 75 (bin_op)


State 143

   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   76       | expr XOR expr .
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    $default  reduce using rule 76 (bin_op)


State 144

   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   74       | expr AND expr .
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    $default  reduce using rule 74 (bin_op)


State 145

   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   79       | expr EQEQ expr .
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    OR     shift, and go to state 109
    XOR    shift, and go to state 110
    AND    shift, and go to state 111
    LT     shift, and go to state 114
    LTEQ   shift, and go to state 115
    GT     shift, and go to state 116
    GTEQ   shift, and go to state 117
    PLUS   shift, and go to state 118
    MINUS  shift, and go to state 119
    MULT   shift, and go to state 120
    DIV    shift, and go to state 121
    MOD    shift, and go to state 122

    $default  reduce using rule 79 (bin_op)


State 146

   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   80       | expr NOTEQ expr .
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    OR     shift, and go to state 109
    XOR    shift, and go to state 110
    AND    shift, and go to state 111
    LT     shift, and go to state 114
    LTEQ   shift, and go to state 115
    GT     shift, and go to state 116
    GTEQ   shift, and go to state 117
    PLUS   shift, and go to state 118
    MINUS  shift, and go to state 119
    MULT   shift, and go to state 120
    DIV    shift, and go to state 121
    MOD    shift, and go to state 122

    $default  reduce using rule 80 (bin_op)


State 147

   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   83       | expr LT expr .
   84       | expr . GT expr

    OR     shift, and go to state 109
    XOR    shift, and go to state 110
    AND    shift, and go to state 111
    PLUS   shift, and go to state 118
    MINUS  shift, and go to state 119
    MULT   shift, and go to state 120
    DIV    shift, and go to state 121
    MOD    shift, and go to state 122

    $default  reduce using rule 83 (bin_op)


State 148

   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   82       | expr LTEQ expr .
   83       | expr . LT expr
   84       | expr . GT expr

    OR     shift, and go to state 109
    XOR    shift, and go to state 110
    AND    shift, and go to state 111
    PLUS   shift, and go to state 118
    MINUS  shift, and go to state 119
    MULT   shift, and go to state 120
    DIV    shift, and go to state 121
    MOD    shift, and go to state 122

    $default  reduce using rule 82 (bin_op)


State 149

   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr
   84       | expr GT expr .

    OR     shift, and go to state 109
    XOR    shift, and go to state 110
    AND    shift, and go to state 111
    PLUS   shift, and go to state 118
    MINUS  shift, and go to state 119
    MULT   shift, and go to state 120
    DIV    shift, and go to state 121
    MOD    shift, and go to state 122

    $default  reduce using rule 84 (bin_op)


State 150

   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   81       | expr GTEQ expr .
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    OR     shift, and go to state 109
    XOR    shift, and go to state 110
    AND    shift, and go to state 111
    PLUS   shift, and go to state 118
    MINUS  shift, and go to state 119
    MULT   shift, and go to state 120
    DIV    shift, and go to state 121
    MOD    shift, and go to state 122

    $default  reduce using rule 81 (bin_op)


State 151

   69 bin_op: expr . PLUS expr
   69       | expr PLUS expr .
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    OR    shift, and go to state 109
    XOR   shift, and go to state 110
    AND   shift, and go to state 111
    MULT  shift, and go to state 120
    DIV   shift, and go to state 121
    MOD   shift, and go to state 122

    $default  reduce using rule 69 (bin_op)


State 152

   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   70       | expr MINUS expr .
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    OR    shift, and go to state 109
    XOR   shift, and go to state 110
    AND   shift, and go to state 111
    MULT  shift, and go to state 120
    DIV   shift, and go to state 121
    MOD   shift, and go to state 122

    $default  reduce using rule 70 (bin_op)


State 153

   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   71       | expr MULT expr .
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    OR   shift, and go to state 109
    XOR  shift, and go to state 110
    AND  shift, and go to state 111

    $default  reduce using rule 71 (bin_op)


State 154

   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   72       | expr DIV expr .
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    OR   shift, and go to state 109
    XOR  shift, and go to state 110
    AND  shift, and go to state 111

    $default  reduce using rule 72 (bin_op)


State 155

   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   73       | expr MOD expr .
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    OR   shift, and go to state 109
    XOR  shift, and go to state 110
    AND  shift, and go to state 111

    $default  reduce using rule 73 (bin_op)


State 156

   64 expr: id LBRACK expr . RBRACK
   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    RBRACK  shift, and go to state 173
    OROR    shift, and go to state 107
    ANDAND  shift, and go to state 108
    OR      shift, and go to state 109
    XOR     shift, and go to state 110
    AND     shift, and go to state 111
    EQEQ    shift, and go to state 112
    NOTEQ   shift, and go to state 113
    LT      shift, and go to state 114
    LTEQ    shift, and go to state 115
    GT      shift, and go to state 116
    GTEQ    shift, and go to state 117
    PLUS    shift, and go to state 118
    MINUS   shift, and go to state 119
    MULT    shift, and go to state 120
    DIV     shift, and go to state 121
    MOD     shift, and go to state 122


State 157

   52 loop_stmt1: RANGE . loop_stmt2
   53           | RANGE . loop_stmt2 TO loop_stmt2

    ID         shift, and go to state 4
    CONST_INT  shift, and go to state 40

    loop_stmt2  go to state 174
    const_int   go to state 175
    id          go to state 176


State 158

   48 loop_stmt: FOR id IN loop_stmt1 . COLON INDENT block UNINDENT

    COLON  shift, and go to state 177


State 159

   51 loop_stmt1: id .

    $default  reduce using rule 51 (loop_stmt1)


State 160

   40 cond_stmt: IF expr COLON INDENT . block UNINDENT cond_stmt1
   41          | IF expr COLON INDENT . block UNINDENT cond_stmt1 ELSE COLON INDENT block UNINDENT

    WHILE     shift, and go to state 45
    FOR       shift, and go to state 46
    BREAK     shift, and go to state 47
    CONTINUE  shift, and go to state 48
    IF        shift, and go to state 49
    CASE      shift, and go to state 50
    RETURN    shift, and go to state 51
    ID        shift, and go to state 4

    $default  reduce using rule 20 (block)

    var_dcl      go to state 52
    block        go to state 178
    statement    go to state 54
    assignment   go to state 55
    func_call    go to state 56
    cond_stmt    go to state 57
    loop_stmt    go to state 58
    return_stmt  go to state 59
    id           go to state 60


State 161

   42 cond_stmt: CASE expr COLON INDENT . cond_stmt2 UNINDENT
   43          | CASE expr COLON INDENT . cond_stmt2 DEFAULT COLON INDENT block UNINDENT UNINDENT

    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    $default  reduce using rule 46 (cond_stmt2)

    cond_stmt2  go to state 179
    const_val   go to state 180
    const_int   go to state 82


State 162

   59 id1: COMMA id . id1

    COMMA  shift, and go to state 127

    $default  reduce using rule 58 (id1)

    id1  go to state 181


State 163

   34 expr1: COMMA . expr expr1

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 182
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 164

   32 assignment: var_dcl EQ expr expr1 .

    $default  reduce using rule 32 (assignment)


State 165

   31 assignment: id LBRACK expr expr1 . RBRACK EQ expr expr1

    RBRACK  shift, and go to state 183


State 166

   30 assignment: id EQ expr expr1 .

    $default  reduce using rule 30 (assignment)


State 167

   39 func_param1: COMMA . expr func_param1

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 184
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 168

   37 func_param: LPAREN expr func_param1 . RPAREN

    RPAREN  shift, and go to state 185


State 169

   17 func_dcl: id var_dcl func_dcl1 COLON INDENT block UNINDENT .

    $default  reduce using rule 17 (func_dcl)


State 170

   12 ts_dcl1: COMMA type LT const_int GT ts_dcl1 .

    $default  reduce using rule 12 (ts_dcl1)


State 171

   15 func_dcl: ts_dcl id var_dcl func_dcl1 COLON INDENT block UNINDENT .

    $default  reduce using rule 15 (func_dcl)


State 172

   49 loop_stmt: WHILE expr COLON INDENT block . UNINDENT

    UNINDENT  shift, and go to state 186


State 173

   64 expr: id LBRACK expr RBRACK .

    $default  reduce using rule 64 (expr)


State 174

   52 loop_stmt1: RANGE loop_stmt2 .
   53           | RANGE loop_stmt2 . TO loop_stmt2

    TO  shift, and go to state 187

    $default  reduce using rule 52 (loop_stmt1)


State 175

   54 loop_stmt2: const_int .

    $default  reduce using rule 54 (loop_stmt2)


State 176

   55 loop_stmt2: id .

    $default  reduce using rule 55 (loop_stmt2)


State 177

   48 loop_stmt: FOR id IN loop_stmt1 COLON . INDENT block UNINDENT

    INDENT  shift, and go to state 188


State 178

   40 cond_stmt: IF expr COLON INDENT block . UNINDENT cond_stmt1
   41          | IF expr COLON INDENT block . UNINDENT cond_stmt1 ELSE COLON INDENT block UNINDENT

    UNINDENT  shift, and go to state 189


State 179

   42 cond_stmt: CASE expr COLON INDENT cond_stmt2 . UNINDENT
   43          | CASE expr COLON INDENT cond_stmt2 . DEFAULT COLON INDENT block UNINDENT UNINDENT

    UNINDENT  shift, and go to state 190
    DEFAULT   shift, and go to state 191


State 180

   47 cond_stmt2: const_val . COLON INDENT block UNINDENT cond_stmt2

    COLON  shift, and go to state 192


State 181

   59 id1: COMMA id id1 .

    $default  reduce using rule 59 (id1)


State 182

   34 expr1: COMMA expr . expr1
   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    COMMA   shift, and go to state 163
    OROR    shift, and go to state 107
    ANDAND  shift, and go to state 108
    OR      shift, and go to state 109
    XOR     shift, and go to state 110
    AND     shift, and go to state 111
    EQEQ    shift, and go to state 112
    NOTEQ   shift, and go to state 113
    LT      shift, and go to state 114
    LTEQ    shift, and go to state 115
    GT      shift, and go to state 116
    GTEQ    shift, and go to state 117
    PLUS    shift, and go to state 118
    MINUS   shift, and go to state 119
    MULT    shift, and go to state 120
    DIV     shift, and go to state 121
    MOD     shift, and go to state 122

    $default  reduce using rule 33 (expr1)

    expr1  go to state 193


State 183

   31 assignment: id LBRACK expr expr1 RBRACK . EQ expr expr1

    EQ  shift, and go to state 194


State 184

   39 func_param1: COMMA expr . func_param1
   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    COMMA   shift, and go to state 167
    OROR    shift, and go to state 107
    ANDAND  shift, and go to state 108
    OR      shift, and go to state 109
    XOR     shift, and go to state 110
    AND     shift, and go to state 111
    EQEQ    shift, and go to state 112
    NOTEQ   shift, and go to state 113
    LT      shift, and go to state 114
    LTEQ    shift, and go to state 115
    GT      shift, and go to state 116
    GTEQ    shift, and go to state 117
    PLUS    shift, and go to state 118
    MINUS   shift, and go to state 119
    MULT    shift, and go to state 120
    DIV     shift, and go to state 121
    MOD     shift, and go to state 122

    $default  reduce using rule 38 (func_param1)

    func_param1  go to state 195


State 185

   37 func_param: LPAREN expr func_param1 RPAREN .

    $default  reduce using rule 37 (func_param)


State 186

   49 loop_stmt: WHILE expr COLON INDENT block UNINDENT .

    $default  reduce using rule 49 (loop_stmt)


State 187

   53 loop_stmt1: RANGE loop_stmt2 TO . loop_stmt2

    ID         shift, and go to state 4
    CONST_INT  shift, and go to state 40

    loop_stmt2  go to state 196
    const_int   go to state 175
    id          go to state 176


State 188

   48 loop_stmt: FOR id IN loop_stmt1 COLON INDENT . block UNINDENT

    WHILE     shift, and go to state 45
    FOR       shift, and go to state 46
    BREAK     shift, and go to state 47
    CONTINUE  shift, and go to state 48
    IF        shift, and go to state 49
    CASE      shift, and go to state 50
    RETURN    shift, and go to state 51
    ID        shift, and go to state 4

    $default  reduce using rule 20 (block)

    var_dcl      go to state 52
    block        go to state 197
    statement    go to state 54
    assignment   go to state 55
    func_call    go to state 56
    cond_stmt    go to state 57
    loop_stmt    go to state 58
    return_stmt  go to state 59
    id           go to state 60


State 189

   40 cond_stmt: IF expr COLON INDENT block UNINDENT . cond_stmt1
   41          | IF expr COLON INDENT block UNINDENT . cond_stmt1 ELSE COLON INDENT block UNINDENT

    ELIF  shift, and go to state 198

    $default  reduce using rule 44 (cond_stmt1)

    cond_stmt1  go to state 199


State 190

   42 cond_stmt: CASE expr COLON INDENT cond_stmt2 UNINDENT .

    $default  reduce using rule 42 (cond_stmt)


State 191

   43 cond_stmt: CASE expr COLON INDENT cond_stmt2 DEFAULT . COLON INDENT block UNINDENT UNINDENT

    COLON  shift, and go to state 200


State 192

   47 cond_stmt2: const_val COLON . INDENT block UNINDENT cond_stmt2

    INDENT  shift, and go to state 201


State 193

   34 expr1: COMMA expr expr1 .

    $default  reduce using rule 34 (expr1)


State 194

   31 assignment: id LBRACK expr expr1 RBRACK EQ . expr expr1

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 202
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 195

   39 func_param1: COMMA expr func_param1 .

    $default  reduce using rule 39 (func_param1)


State 196

   53 loop_stmt1: RANGE loop_stmt2 TO loop_stmt2 .

    $default  reduce using rule 53 (loop_stmt1)


State 197

   48 loop_stmt: FOR id IN loop_stmt1 COLON INDENT block . UNINDENT

    UNINDENT  shift, and go to state 203


State 198

   45 cond_stmt1: ELIF . expr COLON INDENT block UNINDENT cond_stmt1

    NOT           shift, and go to state 68
    MINUS         shift, and go to state 69
    COMP          shift, and go to state 70
    LPAREN        shift, and go to state 71
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    func_call  go to state 78
    expr       go to state 204
    bin_op     go to state 80
    const_val  go to state 81
    const_int  go to state 82
    id         go to state 83


State 199

   40 cond_stmt: IF expr COLON INDENT block UNINDENT cond_stmt1 .
   41          | IF expr COLON INDENT block UNINDENT cond_stmt1 . ELSE COLON INDENT block UNINDENT

    ELSE  shift, and go to state 205

    $default  reduce using rule 40 (cond_stmt)


State 200

   43 cond_stmt: CASE expr COLON INDENT cond_stmt2 DEFAULT COLON . INDENT block UNINDENT UNINDENT

    INDENT  shift, and go to state 206


State 201

   47 cond_stmt2: const_val COLON INDENT . block UNINDENT cond_stmt2

    WHILE     shift, and go to state 45
    FOR       shift, and go to state 46
    BREAK     shift, and go to state 47
    CONTINUE  shift, and go to state 48
    IF        shift, and go to state 49
    CASE      shift, and go to state 50
    RETURN    shift, and go to state 51
    ID        shift, and go to state 4

    $default  reduce using rule 20 (block)

    var_dcl      go to state 52
    block        go to state 207
    statement    go to state 54
    assignment   go to state 55
    func_call    go to state 56
    cond_stmt    go to state 57
    loop_stmt    go to state 58
    return_stmt  go to state 59
    id           go to state 60


State 202

   31 assignment: id LBRACK expr expr1 RBRACK EQ expr . expr1
   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    COMMA   shift, and go to state 163
    OROR    shift, and go to state 107
    ANDAND  shift, and go to state 108
    OR      shift, and go to state 109
    XOR     shift, and go to state 110
    AND     shift, and go to state 111
    EQEQ    shift, and go to state 112
    NOTEQ   shift, and go to state 113
    LT      shift, and go to state 114
    LTEQ    shift, and go to state 115
    GT      shift, and go to state 116
    GTEQ    shift, and go to state 117
    PLUS    shift, and go to state 118
    MINUS   shift, and go to state 119
    MULT    shift, and go to state 120
    DIV     shift, and go to state 121
    MOD     shift, and go to state 122

    $default  reduce using rule 33 (expr1)

    expr1  go to state 208


State 203

   48 loop_stmt: FOR id IN loop_stmt1 COLON INDENT block UNINDENT .

    $default  reduce using rule 48 (loop_stmt)


State 204

   45 cond_stmt1: ELIF expr . COLON INDENT block UNINDENT cond_stmt1
   69 bin_op: expr . PLUS expr
   70       | expr . MINUS expr
   71       | expr . MULT expr
   72       | expr . DIV expr
   73       | expr . MOD expr
   74       | expr . AND expr
   75       | expr . OR expr
   76       | expr . XOR expr
   77       | expr . OROR expr
   78       | expr . ANDAND expr
   79       | expr . EQEQ expr
   80       | expr . NOTEQ expr
   81       | expr . GTEQ expr
   82       | expr . LTEQ expr
   83       | expr . LT expr
   84       | expr . GT expr

    COLON   shift, and go to state 209
    OROR    shift, and go to state 107
    ANDAND  shift, and go to state 108
    OR      shift, and go to state 109
    XOR     shift, and go to state 110
    AND     shift, and go to state 111
    EQEQ    shift, and go to state 112
    NOTEQ   shift, and go to state 113
    LT      shift, and go to state 114
    LTEQ    shift, and go to state 115
    GT      shift, and go to state 116
    GTEQ    shift, and go to state 117
    PLUS    shift, and go to state 118
    MINUS   shift, and go to state 119
    MULT    shift, and go to state 120
    DIV     shift, and go to state 121
    MOD     shift, and go to state 122


State 205

   41 cond_stmt: IF expr COLON INDENT block UNINDENT cond_stmt1 ELSE . COLON INDENT block UNINDENT

    COLON  shift, and go to state 210


State 206

   43 cond_stmt: CASE expr COLON INDENT cond_stmt2 DEFAULT COLON INDENT . block UNINDENT UNINDENT

    WHILE     shift, and go to state 45
    FOR       shift, and go to state 46
    BREAK     shift, and go to state 47
    CONTINUE  shift, and go to state 48
    IF        shift, and go to state 49
    CASE      shift, and go to state 50
    RETURN    shift, and go to state 51
    ID        shift, and go to state 4

    $default  reduce using rule 20 (block)

    var_dcl      go to state 52
    block        go to state 211
    statement    go to state 54
    assignment   go to state 55
    func_call    go to state 56
    cond_stmt    go to state 57
    loop_stmt    go to state 58
    return_stmt  go to state 59
    id           go to state 60


State 207

   47 cond_stmt2: const_val COLON INDENT block . UNINDENT cond_stmt2

    UNINDENT  shift, and go to state 212


State 208

   31 assignment: id LBRACK expr expr1 RBRACK EQ expr expr1 .

    $default  reduce using rule 31 (assignment)


State 209

   45 cond_stmt1: ELIF expr COLON . INDENT block UNINDENT cond_stmt1

    INDENT  shift, and go to state 213


State 210

   41 cond_stmt: IF expr COLON INDENT block UNINDENT cond_stmt1 ELSE COLON . INDENT block UNINDENT

    INDENT  shift, and go to state 214


State 211

   43 cond_stmt: CASE expr COLON INDENT cond_stmt2 DEFAULT COLON INDENT block . UNINDENT UNINDENT

    UNINDENT  shift, and go to state 215


State 212

   47 cond_stmt2: const_val COLON INDENT block UNINDENT . cond_stmt2

    CONST_INT     shift, and go to state 40
    CONST_REAL    shift, and go to state 72
    CONST_CHAR    shift, and go to state 73
    CONST_STRING  shift, and go to state 74
    CONST_LONG    shift, and go to state 75
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77

    $default  reduce using rule 46 (cond_stmt2)

    cond_stmt2  go to state 216
    const_val   go to state 180
    const_int   go to state 82


State 213

   45 cond_stmt1: ELIF expr COLON INDENT . block UNINDENT cond_stmt1

    WHILE     shift, and go to state 45
    FOR       shift, and go to state 46
    BREAK     shift, and go to state 47
    CONTINUE  shift, and go to state 48
    IF        shift, and go to state 49
    CASE      shift, and go to state 50
    RETURN    shift, and go to state 51
    ID        shift, and go to state 4

    $default  reduce using rule 20 (block)

    var_dcl      go to state 52
    block        go to state 217
    statement    go to state 54
    assignment   go to state 55
    func_call    go to state 56
    cond_stmt    go to state 57
    loop_stmt    go to state 58
    return_stmt  go to state 59
    id           go to state 60


State 214

   41 cond_stmt: IF expr COLON INDENT block UNINDENT cond_stmt1 ELSE COLON INDENT . block UNINDENT

    WHILE     shift, and go to state 45
    FOR       shift, and go to state 46
    BREAK     shift, and go to state 47
    CONTINUE  shift, and go to state 48
    IF        shift, and go to state 49
    CASE      shift, and go to state 50
    RETURN    shift, and go to state 51
    ID        shift, and go to state 4

    $default  reduce using rule 20 (block)

    var_dcl      go to state 52
    block        go to state 218
    statement    go to state 54
    assignment   go to state 55
    func_call    go to state 56
    cond_stmt    go to state 57
    loop_stmt    go to state 58
    return_stmt  go to state 59
    id           go to state 60


State 215

   43 cond_stmt: CASE expr COLON INDENT cond_stmt2 DEFAULT COLON INDENT block UNINDENT . UNINDENT

    UNINDENT  shift, and go to state 219


State 216

   47 cond_stmt2: const_val COLON INDENT block UNINDENT cond_stmt2 .

    $default  reduce using rule 47 (cond_stmt2)


State 217

   45 cond_stmt1: ELIF expr COLON INDENT block . UNINDENT cond_stmt1

    UNINDENT  shift, and go to state 220


State 218

   41 cond_stmt: IF expr COLON INDENT block UNINDENT cond_stmt1 ELSE COLON INDENT block . UNINDENT

    UNINDENT  shift, and go to state 221


State 219

   43 cond_stmt: CASE expr COLON INDENT cond_stmt2 DEFAULT COLON INDENT block UNINDENT UNINDENT .

    $default  reduce using rule 43 (cond_stmt)


State 220

   45 cond_stmt1: ELIF expr COLON INDENT block UNINDENT . cond_stmt1

    ELIF  shift, and go to state 198

    $default  reduce using rule 44 (cond_stmt1)

    cond_stmt1  go to state 222


State 221

   41 cond_stmt: IF expr COLON INDENT block UNINDENT cond_stmt1 ELSE COLON INDENT block UNINDENT .

    $default  reduce using rule 41 (cond_stmt)


State 222

   45 cond_stmt1: ELIF expr COLON INDENT block UNINDENT cond_stmt1 .

    $default  reduce using rule 45 (cond_stmt1)
