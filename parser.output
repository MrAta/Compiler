Terminals unused in grammar

   SIZEOF
   NEG


Grammar

    0 $accept: program $end

    1 program: program1

    2 program1: %empty
    3         | var_dcl program1
    4         | func_dcl program1
    5         | start program1
    6         | finish program1

    7 start: START id

    8 finish: FINISH id

    9 var_dcl: id ts_dcl

   10 ts_dcl: LBRACK type ts_dcl1 RBRACK
   11       | LBRACK type LT const_int GT ts_dcl1 RBRACK

   12 ts_dcl1: %empty
   13        | COMMA type LT const_int GT ts_dcl1
   14        | COMMA type ts_dcl1

   15 func_dcl: id COLON INDENT block UNINDENT
   16         | ts_dcl id var_dcl func_dcl1 COLON INDENT block UNINDENT
   17         | ts_dcl id COLON INDENT block UNINDENT
   18         | id var_dcl func_dcl1 COLON INDENT block UNINDENT

   19 func_dcl1: %empty
   20          | COMMA var_dcl func_dcl1

   21 block: block1

   22 block1: %empty
   23       | statement block1

   24 statement: assignment
   25          | var_dcl
   26          | func_call
   27          | if_stmt
   28          | case_stmt
   29          | loop_stmt
   30          | return_stmt
   31          | BREAK
   32          | CONTINUE

   33 assignment: assignment_lhs EQ expr expr1

   34 assignment_lhs: id
   35               | array
   36               | var_dcl

   37 expr1: %empty
   38      | COMMA expr expr1

   39 func_call: id func_param

   40 func_param: LPAREN RPAREN
   41           | LPAREN expr func_param1 RPAREN

   42 func_param1: %empty
   43            | COMMA expr func_param1

   44 if_stmt: IF expr COLON INDENT block UNINDENT if_stmt1

   45 if_stmt1: %empty
   46         | ELSE COLON INDENT block UNINDENT
   47         | ELIF expr COLON INDENT block UNINDENT if_stmt1

   48 case_stmt: CASE expr COLON INDENT case_stmt1 UNINDENT
   49          | CASE expr COLON INDENT case_stmt1 DEFAULT COLON INDENT block UNINDENT UNINDENT

   50 case_stmt1: %empty
   51           | const_int COLON INDENT block UNINDENT case_stmt1

   52 loop_stmt: FOR id IN loop_stmt1 COLON INDENT block UNINDENT
   53          | WHILE expr COLON INDENT block UNINDENT

   54 loop_stmt1: %empty
   55           | id
   56           | RANGE loop_stmt2
   57           | RANGE loop_stmt2 TO loop_stmt2

   58 loop_stmt2: const_int
   59           | id

   60 return_stmt: RETURN
   61            | RETURN id id1

   62 id1: %empty
   63    | COMMA id id1

   64 expr: LPAREN expr RPAREN
   65     | bin_op
   66     | func_call
   67     | id
   68     | array
   69     | const_val
   70     | MINUS expr
   71     | NOT expr
   72     | COMP expr

   73 bin_op: expr PLUS expr
   74       | expr MINUS expr
   75       | expr MULT expr
   76       | expr DIV expr
   77       | expr MOD expr
   78       | expr AND expr
   79       | expr OR expr
   80       | expr XOR expr
   81       | expr OROR expr
   82       | expr ANDAND expr
   83       | expr EQEQ expr
   84       | expr NOTEQ expr
   85       | expr GTEQ expr
   86       | expr LTEQ expr
   87       | expr LT expr
   88       | expr GT expr

   89 const_val: const_int
   90          | CONST_REAL
   91          | CONST_CHAR
   92          | TRUE
   93          | FALSE
   94          | CONST_STRING
   95          | CONST_LONG

   96 type: BOOL
   97     | INT
   98     | LONG
   99     | CHAR
  100     | REAL
  101     | STRING

  102 const_int: CONST_INT

  103 id: ID

  104 array: id LBRACK expr expr1 RBRACK


Terminals, with rules where they appear

$end (0) 0
error (256)
INDENT (258) 15 16 17 18 44 46 47 48 49 51 52 53
UNINDENT (259) 15 16 17 18 44 46 47 48 49 51 52 53
LBRACK (260) 10 11 104
RBRACK (261) 10 11 104
START (262) 7
FINISH (263) 8
WHILE (264) 53
FOR (265) 52
IN (266) 52
RANGE (267) 56 57
TO (268) 57
BREAK (269) 31
CONTINUE (270) 32
IF (271) 44
ELSE (272) 46
ELIF (273) 47
CASE (274) 48 49
DEFAULT (275) 49
RETURN (276) 60 61
COLON (277) 15 16 17 18 44 46 47 48 49 51 52 53
NOT (278) 71
COMMA (279) 13 14 20 38 43 63
EQ (280) 33
OROR (281) 81
ANDAND (282) 82
OR (283) 79
XOR (284) 80
AND (285) 78
EQEQ (286) 83
NOTEQ (287) 84
LT (288) 11 13 87
LTEQ (289) 86
GT (290) 11 13 88
GTEQ (291) 85
PLUS (292) 73
MINUS (293) 70 74
MULT (294) 75
DIV (295) 76
MOD (296) 77
SIZEOF (297)
NEG (298)
COMP (299) 72
LPAREN (300) 40 41 64
RPAREN (301) 40 41 64
BOOL (302) 96
INT (303) 97
LONG (304) 98
CHAR (305) 99
REAL (306) 100
STRING (307) 101
ID (308) 103
CONST_INT (309) 102
CONST_REAL (310) 90
CONST_CHAR (311) 91
CONST_STRING (312) 94
CONST_LONG (313) 95
TRUE (314) 92
FALSE (315) 93


Nonterminals, with rules where they appear

$accept (61)
    on left: 0
program (62)
    on left: 1, on right: 0
program1 (63)
    on left: 2 3 4 5 6, on right: 1 3 4 5 6
start (64)
    on left: 7, on right: 5
finish (65)
    on left: 8, on right: 6
var_dcl (66)
    on left: 9, on right: 3 16 18 20 25 36
ts_dcl (67)
    on left: 10 11, on right: 9 16 17
ts_dcl1 (68)
    on left: 12 13 14, on right: 10 11 13 14
func_dcl (69)
    on left: 15 16 17 18, on right: 4
func_dcl1 (70)
    on left: 19 20, on right: 16 18 20
block (71)
    on left: 21, on right: 15 16 17 18 44 46 47 49 51 52 53
block1 (72)
    on left: 22 23, on right: 21 23
statement (73)
    on left: 24 25 26 27 28 29 30 31 32, on right: 23
assignment (74)
    on left: 33, on right: 24
assignment_lhs (75)
    on left: 34 35 36, on right: 33
expr1 (76)
    on left: 37 38, on right: 33 38 104
func_call (77)
    on left: 39, on right: 26 66
func_param (78)
    on left: 40 41, on right: 39
func_param1 (79)
    on left: 42 43, on right: 41 43
if_stmt (80)
    on left: 44, on right: 27
if_stmt1 (81)
    on left: 45 46 47, on right: 44 47
case_stmt (82)
    on left: 48 49, on right: 28
case_stmt1 (83)
    on left: 50 51, on right: 48 49 51
loop_stmt (84)
    on left: 52 53, on right: 29
loop_stmt1 (85)
    on left: 54 55 56 57, on right: 52
loop_stmt2 (86)
    on left: 58 59, on right: 56 57
return_stmt (87)
    on left: 60 61, on right: 30
id1 (88)
    on left: 62 63, on right: 61 63
expr (89)
    on left: 64 65 66 67 68 69 70 71 72, on right: 33 38 41 43 44 47
    48 49 53 64 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86
    87 88 104
bin_op (90)
    on left: 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88, on right:
    65
const_val (91)
    on left: 89 90 91 92 93 94 95, on right: 69
type (92)
    on left: 96 97 98 99 100 101, on right: 10 11 13 14
const_int (93)
    on left: 102, on right: 11 13 51 58 89
id (94)
    on left: 103, on right: 7 8 9 15 16 17 18 34 39 52 55 59 61 63
    67 104
array (95)
    on left: 104, on right: 35 68


State 0

    0 $accept: . program $end

    LBRACK  shift, and go to state 1
    START   shift, and go to state 2
    FINISH  shift, and go to state 3
    ID      shift, and go to state 4

    $default  reduce using rule 2 (program1)

    program   go to state 5
    program1  go to state 6
    start     go to state 7
    finish    go to state 8
    var_dcl   go to state 9
    ts_dcl    go to state 10
    func_dcl  go to state 11
    id        go to state 12


State 1

   10 ts_dcl: LBRACK . type ts_dcl1 RBRACK
   11       | LBRACK . type LT const_int GT ts_dcl1 RBRACK

    BOOL    shift, and go to state 13
    INT     shift, and go to state 14
    LONG    shift, and go to state 15
    CHAR    shift, and go to state 16
    REAL    shift, and go to state 17
    STRING  shift, and go to state 18

    type  go to state 19


State 2

    7 start: START . id

    ID  shift, and go to state 4

    id  go to state 20


State 3

    8 finish: FINISH . id

    ID  shift, and go to state 4

    id  go to state 21


State 4

  103 id: ID .

    $default  reduce using rule 103 (id)


State 5

    0 $accept: program . $end

    $end  shift, and go to state 22


State 6

    1 program: program1 .

    $default  reduce using rule 1 (program)


State 7

    5 program1: start . program1

    LBRACK  shift, and go to state 1
    START   shift, and go to state 2
    FINISH  shift, and go to state 3
    ID      shift, and go to state 4

    $default  reduce using rule 2 (program1)

    program1  go to state 23
    start     go to state 7
    finish    go to state 8
    var_dcl   go to state 9
    ts_dcl    go to state 10
    func_dcl  go to state 11
    id        go to state 12


State 8

    6 program1: finish . program1

    LBRACK  shift, and go to state 1
    START   shift, and go to state 2
    FINISH  shift, and go to state 3
    ID      shift, and go to state 4

    $default  reduce using rule 2 (program1)

    program1  go to state 24
    start     go to state 7
    finish    go to state 8
    var_dcl   go to state 9
    ts_dcl    go to state 10
    func_dcl  go to state 11
    id        go to state 12


State 9

    3 program1: var_dcl . program1

    LBRACK  shift, and go to state 1
    START   shift, and go to state 2
    FINISH  shift, and go to state 3
    ID      shift, and go to state 4

    $default  reduce using rule 2 (program1)

    program1  go to state 25
    start     go to state 7
    finish    go to state 8
    var_dcl   go to state 9
    ts_dcl    go to state 10
    func_dcl  go to state 11
    id        go to state 12


State 10

   16 func_dcl: ts_dcl . id var_dcl func_dcl1 COLON INDENT block UNINDENT
   17         | ts_dcl . id COLON INDENT block UNINDENT

    ID  shift, and go to state 4

    id  go to state 26


State 11

    4 program1: func_dcl . program1

    LBRACK  shift, and go to state 1
    START   shift, and go to state 2
    FINISH  shift, and go to state 3
    ID      shift, and go to state 4

    $default  reduce using rule 2 (program1)

    program1  go to state 27
    start     go to state 7
    finish    go to state 8
    var_dcl   go to state 9
    ts_dcl    go to state 10
    func_dcl  go to state 11
    id        go to state 12


State 12

    9 var_dcl: id . ts_dcl
   15 func_dcl: id . COLON INDENT block UNINDENT
   18         | id . var_dcl func_dcl1 COLON INDENT block UNINDENT

    LBRACK  shift, and go to state 1
    COLON   shift, and go to state 28
    ID      shift, and go to state 4

    var_dcl  go to state 29
    ts_dcl   go to state 30
    id       go to state 31


State 13

   96 type: BOOL .

    $default  reduce using rule 96 (type)


State 14

   97 type: INT .

    $default  reduce using rule 97 (type)


State 15

   98 type: LONG .

    $default  reduce using rule 98 (type)


State 16

   99 type: CHAR .

    $default  reduce using rule 99 (type)


State 17

  100 type: REAL .

    $default  reduce using rule 100 (type)


State 18

  101 type: STRING .

    $default  reduce using rule 101 (type)


State 19

   10 ts_dcl: LBRACK type . ts_dcl1 RBRACK
   11       | LBRACK type . LT const_int GT ts_dcl1 RBRACK

    COMMA  shift, and go to state 32
    LT     shift, and go to state 33

    $default  reduce using rule 12 (ts_dcl1)

    ts_dcl1  go to state 34


State 20

    7 start: START id .

    $default  reduce using rule 7 (start)


State 21

    8 finish: FINISH id .

    $default  reduce using rule 8 (finish)


State 22

    0 $accept: program $end .

    $default  accept


State 23

    5 program1: start program1 .

    $default  reduce using rule 5 (program1)


State 24

    6 program1: finish program1 .

    $default  reduce using rule 6 (program1)


State 25

    3 program1: var_dcl program1 .

    $default  reduce using rule 3 (program1)


State 26

   16 func_dcl: ts_dcl id . var_dcl func_dcl1 COLON INDENT block UNINDENT
   17         | ts_dcl id . COLON INDENT block UNINDENT

    COLON  shift, and go to state 35
    ID     shift, and go to state 4

    var_dcl  go to state 36
    id       go to state 31


State 27

    4 program1: func_dcl program1 .

    $default  reduce using rule 4 (program1)


State 28

   15 func_dcl: id COLON . INDENT block UNINDENT

    INDENT  shift, and go to state 37


State 29

   18 func_dcl: id var_dcl . func_dcl1 COLON INDENT block UNINDENT

    COMMA  shift, and go to state 38

    $default  reduce using rule 19 (func_dcl1)

    func_dcl1  go to state 39


State 30

    9 var_dcl: id ts_dcl .

    $default  reduce using rule 9 (var_dcl)


State 31

    9 var_dcl: id . ts_dcl

    LBRACK  shift, and go to state 1

    ts_dcl  go to state 30


State 32

   13 ts_dcl1: COMMA . type LT const_int GT ts_dcl1
   14        | COMMA . type ts_dcl1

    BOOL    shift, and go to state 13
    INT     shift, and go to state 14
    LONG    shift, and go to state 15
    CHAR    shift, and go to state 16
    REAL    shift, and go to state 17
    STRING  shift, and go to state 18

    type  go to state 40


State 33

   11 ts_dcl: LBRACK type LT . const_int GT ts_dcl1 RBRACK

    CONST_INT  shift, and go to state 41

    const_int  go to state 42


State 34

   10 ts_dcl: LBRACK type ts_dcl1 . RBRACK

    RBRACK  shift, and go to state 43


State 35

   17 func_dcl: ts_dcl id COLON . INDENT block UNINDENT

    INDENT  shift, and go to state 44


State 36

   16 func_dcl: ts_dcl id var_dcl . func_dcl1 COLON INDENT block UNINDENT

    COMMA  shift, and go to state 38

    $default  reduce using rule 19 (func_dcl1)

    func_dcl1  go to state 45


State 37

   15 func_dcl: id COLON INDENT . block UNINDENT

    WHILE     shift, and go to state 46
    FOR       shift, and go to state 47
    BREAK     shift, and go to state 48
    CONTINUE  shift, and go to state 49
    IF        shift, and go to state 50
    CASE      shift, and go to state 51
    RETURN    shift, and go to state 52
    ID        shift, and go to state 4

    $default  reduce using rule 22 (block1)

    var_dcl         go to state 53
    block           go to state 54
    block1          go to state 55
    statement       go to state 56
    assignment      go to state 57
    assignment_lhs  go to state 58
    func_call       go to state 59
    if_stmt         go to state 60
    case_stmt       go to state 61
    loop_stmt       go to state 62
    return_stmt     go to state 63
    id              go to state 64
    array           go to state 65


State 38

   20 func_dcl1: COMMA . var_dcl func_dcl1

    ID  shift, and go to state 4

    var_dcl  go to state 66
    id       go to state 31


State 39

   18 func_dcl: id var_dcl func_dcl1 . COLON INDENT block UNINDENT

    COLON  shift, and go to state 67


State 40

   13 ts_dcl1: COMMA type . LT const_int GT ts_dcl1
   14        | COMMA type . ts_dcl1

    COMMA  shift, and go to state 32
    LT     shift, and go to state 68

    $default  reduce using rule 12 (ts_dcl1)

    ts_dcl1  go to state 69


State 41

  102 const_int: CONST_INT .

    $default  reduce using rule 102 (const_int)


State 42

   11 ts_dcl: LBRACK type LT const_int . GT ts_dcl1 RBRACK

    GT  shift, and go to state 70


State 43

   10 ts_dcl: LBRACK type ts_dcl1 RBRACK .

    $default  reduce using rule 10 (ts_dcl)


State 44

   17 func_dcl: ts_dcl id COLON INDENT . block UNINDENT

    WHILE     shift, and go to state 46
    FOR       shift, and go to state 47
    BREAK     shift, and go to state 48
    CONTINUE  shift, and go to state 49
    IF        shift, and go to state 50
    CASE      shift, and go to state 51
    RETURN    shift, and go to state 52
    ID        shift, and go to state 4

    $default  reduce using rule 22 (block1)

    var_dcl         go to state 53
    block           go to state 71
    block1          go to state 55
    statement       go to state 56
    assignment      go to state 57
    assignment_lhs  go to state 58
    func_call       go to state 59
    if_stmt         go to state 60
    case_stmt       go to state 61
    loop_stmt       go to state 62
    return_stmt     go to state 63
    id              go to state 64
    array           go to state 65


State 45

   16 func_dcl: ts_dcl id var_dcl func_dcl1 . COLON INDENT block UNINDENT

    COLON  shift, and go to state 72


State 46

   53 loop_stmt: WHILE . expr COLON INDENT block UNINDENT

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 84
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 47

   52 loop_stmt: FOR . id IN loop_stmt1 COLON INDENT block UNINDENT

    ID  shift, and go to state 4

    id  go to state 90


State 48

   31 statement: BREAK .

    $default  reduce using rule 31 (statement)


State 49

   32 statement: CONTINUE .

    $default  reduce using rule 32 (statement)


State 50

   44 if_stmt: IF . expr COLON INDENT block UNINDENT if_stmt1

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 91
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 51

   48 case_stmt: CASE . expr COLON INDENT case_stmt1 UNINDENT
   49          | CASE . expr COLON INDENT case_stmt1 DEFAULT COLON INDENT block UNINDENT UNINDENT

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 92
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 52

   60 return_stmt: RETURN .
   61            | RETURN . id id1

    ID  shift, and go to state 4

    $default  reduce using rule 60 (return_stmt)

    id  go to state 93


State 53

   25 statement: var_dcl .
   36 assignment_lhs: var_dcl .

    EQ        reduce using rule 36 (assignment_lhs)
    $default  reduce using rule 25 (statement)


State 54

   15 func_dcl: id COLON INDENT block . UNINDENT

    UNINDENT  shift, and go to state 94


State 55

   21 block: block1 .

    $default  reduce using rule 21 (block)


State 56

   23 block1: statement . block1

    WHILE     shift, and go to state 46
    FOR       shift, and go to state 47
    BREAK     shift, and go to state 48
    CONTINUE  shift, and go to state 49
    IF        shift, and go to state 50
    CASE      shift, and go to state 51
    RETURN    shift, and go to state 52
    ID        shift, and go to state 4

    $default  reduce using rule 22 (block1)

    var_dcl         go to state 53
    block1          go to state 95
    statement       go to state 56
    assignment      go to state 57
    assignment_lhs  go to state 58
    func_call       go to state 59
    if_stmt         go to state 60
    case_stmt       go to state 61
    loop_stmt       go to state 62
    return_stmt     go to state 63
    id              go to state 64
    array           go to state 65


State 57

   24 statement: assignment .

    $default  reduce using rule 24 (statement)


State 58

   33 assignment: assignment_lhs . EQ expr expr1

    EQ  shift, and go to state 96


State 59

   26 statement: func_call .

    $default  reduce using rule 26 (statement)


State 60

   27 statement: if_stmt .

    $default  reduce using rule 27 (statement)


State 61

   28 statement: case_stmt .

    $default  reduce using rule 28 (statement)


State 62

   29 statement: loop_stmt .

    $default  reduce using rule 29 (statement)


State 63

   30 statement: return_stmt .

    $default  reduce using rule 30 (statement)


State 64

    9 var_dcl: id . ts_dcl
   34 assignment_lhs: id .
   39 func_call: id . func_param
  104 array: id . LBRACK expr expr1 RBRACK

    LBRACK  shift, and go to state 97
    LPAREN  shift, and go to state 98

    $default  reduce using rule 34 (assignment_lhs)

    ts_dcl      go to state 30
    func_param  go to state 99


State 65

   35 assignment_lhs: array .

    $default  reduce using rule 35 (assignment_lhs)


State 66

   20 func_dcl1: COMMA var_dcl . func_dcl1

    COMMA  shift, and go to state 38

    $default  reduce using rule 19 (func_dcl1)

    func_dcl1  go to state 100


State 67

   18 func_dcl: id var_dcl func_dcl1 COLON . INDENT block UNINDENT

    INDENT  shift, and go to state 101


State 68

   13 ts_dcl1: COMMA type LT . const_int GT ts_dcl1

    CONST_INT  shift, and go to state 41

    const_int  go to state 102


State 69

   14 ts_dcl1: COMMA type ts_dcl1 .

    $default  reduce using rule 14 (ts_dcl1)


State 70

   11 ts_dcl: LBRACK type LT const_int GT . ts_dcl1 RBRACK

    COMMA  shift, and go to state 32

    $default  reduce using rule 12 (ts_dcl1)

    ts_dcl1  go to state 103


State 71

   17 func_dcl: ts_dcl id COLON INDENT block . UNINDENT

    UNINDENT  shift, and go to state 104


State 72

   16 func_dcl: ts_dcl id var_dcl func_dcl1 COLON . INDENT block UNINDENT

    INDENT  shift, and go to state 105


State 73

   71 expr: NOT . expr

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 106
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 74

   70 expr: MINUS . expr

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 107
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 75

   72 expr: COMP . expr

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 108
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 76

   64 expr: LPAREN . expr RPAREN

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 109
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 77

   90 const_val: CONST_REAL .

    $default  reduce using rule 90 (const_val)


State 78

   91 const_val: CONST_CHAR .

    $default  reduce using rule 91 (const_val)


State 79

   94 const_val: CONST_STRING .

    $default  reduce using rule 94 (const_val)


State 80

   95 const_val: CONST_LONG .

    $default  reduce using rule 95 (const_val)


State 81

   92 const_val: TRUE .

    $default  reduce using rule 92 (const_val)


State 82

   93 const_val: FALSE .

    $default  reduce using rule 93 (const_val)


State 83

   66 expr: func_call .

    $default  reduce using rule 66 (expr)


State 84

   53 loop_stmt: WHILE expr . COLON INDENT block UNINDENT
   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    COLON   shift, and go to state 110
    OROR    shift, and go to state 111
    ANDAND  shift, and go to state 112
    OR      shift, and go to state 113
    XOR     shift, and go to state 114
    AND     shift, and go to state 115
    EQEQ    shift, and go to state 116
    NOTEQ   shift, and go to state 117
    LT      shift, and go to state 118
    LTEQ    shift, and go to state 119
    GT      shift, and go to state 120
    GTEQ    shift, and go to state 121
    PLUS    shift, and go to state 122
    MINUS   shift, and go to state 123
    MULT    shift, and go to state 124
    DIV     shift, and go to state 125
    MOD     shift, and go to state 126


State 85

   65 expr: bin_op .

    $default  reduce using rule 65 (expr)


State 86

   69 expr: const_val .

    $default  reduce using rule 69 (expr)


State 87

   89 const_val: const_int .

    $default  reduce using rule 89 (const_val)


State 88

   39 func_call: id . func_param
   67 expr: id .
  104 array: id . LBRACK expr expr1 RBRACK

    LBRACK  shift, and go to state 127
    LPAREN  shift, and go to state 98

    $default  reduce using rule 67 (expr)

    func_param  go to state 99


State 89

   68 expr: array .

    $default  reduce using rule 68 (expr)


State 90

   52 loop_stmt: FOR id . IN loop_stmt1 COLON INDENT block UNINDENT

    IN  shift, and go to state 128


State 91

   44 if_stmt: IF expr . COLON INDENT block UNINDENT if_stmt1
   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    COLON   shift, and go to state 129
    OROR    shift, and go to state 111
    ANDAND  shift, and go to state 112
    OR      shift, and go to state 113
    XOR     shift, and go to state 114
    AND     shift, and go to state 115
    EQEQ    shift, and go to state 116
    NOTEQ   shift, and go to state 117
    LT      shift, and go to state 118
    LTEQ    shift, and go to state 119
    GT      shift, and go to state 120
    GTEQ    shift, and go to state 121
    PLUS    shift, and go to state 122
    MINUS   shift, and go to state 123
    MULT    shift, and go to state 124
    DIV     shift, and go to state 125
    MOD     shift, and go to state 126


State 92

   48 case_stmt: CASE expr . COLON INDENT case_stmt1 UNINDENT
   49          | CASE expr . COLON INDENT case_stmt1 DEFAULT COLON INDENT block UNINDENT UNINDENT
   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    COLON   shift, and go to state 130
    OROR    shift, and go to state 111
    ANDAND  shift, and go to state 112
    OR      shift, and go to state 113
    XOR     shift, and go to state 114
    AND     shift, and go to state 115
    EQEQ    shift, and go to state 116
    NOTEQ   shift, and go to state 117
    LT      shift, and go to state 118
    LTEQ    shift, and go to state 119
    GT      shift, and go to state 120
    GTEQ    shift, and go to state 121
    PLUS    shift, and go to state 122
    MINUS   shift, and go to state 123
    MULT    shift, and go to state 124
    DIV     shift, and go to state 125
    MOD     shift, and go to state 126


State 93

   61 return_stmt: RETURN id . id1

    COMMA  shift, and go to state 131

    $default  reduce using rule 62 (id1)

    id1  go to state 132


State 94

   15 func_dcl: id COLON INDENT block UNINDENT .

    $default  reduce using rule 15 (func_dcl)


State 95

   23 block1: statement block1 .

    $default  reduce using rule 23 (block1)


State 96

   33 assignment: assignment_lhs EQ . expr expr1

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 133
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 97

   10 ts_dcl: LBRACK . type ts_dcl1 RBRACK
   11       | LBRACK . type LT const_int GT ts_dcl1 RBRACK
  104 array: id LBRACK . expr expr1 RBRACK

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    BOOL          shift, and go to state 13
    INT           shift, and go to state 14
    LONG          shift, and go to state 15
    CHAR          shift, and go to state 16
    REAL          shift, and go to state 17
    STRING        shift, and go to state 18
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 134
    bin_op     go to state 85
    const_val  go to state 86
    type       go to state 19
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 98

   40 func_param: LPAREN . RPAREN
   41           | LPAREN . expr func_param1 RPAREN

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    RPAREN        shift, and go to state 135
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 136
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 99

   39 func_call: id func_param .

    $default  reduce using rule 39 (func_call)


State 100

   20 func_dcl1: COMMA var_dcl func_dcl1 .

    $default  reduce using rule 20 (func_dcl1)


State 101

   18 func_dcl: id var_dcl func_dcl1 COLON INDENT . block UNINDENT

    WHILE     shift, and go to state 46
    FOR       shift, and go to state 47
    BREAK     shift, and go to state 48
    CONTINUE  shift, and go to state 49
    IF        shift, and go to state 50
    CASE      shift, and go to state 51
    RETURN    shift, and go to state 52
    ID        shift, and go to state 4

    $default  reduce using rule 22 (block1)

    var_dcl         go to state 53
    block           go to state 137
    block1          go to state 55
    statement       go to state 56
    assignment      go to state 57
    assignment_lhs  go to state 58
    func_call       go to state 59
    if_stmt         go to state 60
    case_stmt       go to state 61
    loop_stmt       go to state 62
    return_stmt     go to state 63
    id              go to state 64
    array           go to state 65


State 102

   13 ts_dcl1: COMMA type LT const_int . GT ts_dcl1

    GT  shift, and go to state 138


State 103

   11 ts_dcl: LBRACK type LT const_int GT ts_dcl1 . RBRACK

    RBRACK  shift, and go to state 139


State 104

   17 func_dcl: ts_dcl id COLON INDENT block UNINDENT .

    $default  reduce using rule 17 (func_dcl)


State 105

   16 func_dcl: ts_dcl id var_dcl func_dcl1 COLON INDENT . block UNINDENT

    WHILE     shift, and go to state 46
    FOR       shift, and go to state 47
    BREAK     shift, and go to state 48
    CONTINUE  shift, and go to state 49
    IF        shift, and go to state 50
    CASE      shift, and go to state 51
    RETURN    shift, and go to state 52
    ID        shift, and go to state 4

    $default  reduce using rule 22 (block1)

    var_dcl         go to state 53
    block           go to state 140
    block1          go to state 55
    statement       go to state 56
    assignment      go to state 57
    assignment_lhs  go to state 58
    func_call       go to state 59
    if_stmt         go to state 60
    case_stmt       go to state 61
    loop_stmt       go to state 62
    return_stmt     go to state 63
    id              go to state 64
    array           go to state 65


State 106

   71 expr: NOT expr .
   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    $default  reduce using rule 71 (expr)


State 107

   70 expr: MINUS expr .
   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    OR    shift, and go to state 113
    XOR   shift, and go to state 114
    AND   shift, and go to state 115
    MULT  shift, and go to state 124
    DIV   shift, and go to state 125
    MOD   shift, and go to state 126

    $default  reduce using rule 70 (expr)


State 108

   72 expr: COMP expr .
   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    $default  reduce using rule 72 (expr)


State 109

   64 expr: LPAREN expr . RPAREN
   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    OROR    shift, and go to state 111
    ANDAND  shift, and go to state 112
    OR      shift, and go to state 113
    XOR     shift, and go to state 114
    AND     shift, and go to state 115
    EQEQ    shift, and go to state 116
    NOTEQ   shift, and go to state 117
    LT      shift, and go to state 118
    LTEQ    shift, and go to state 119
    GT      shift, and go to state 120
    GTEQ    shift, and go to state 121
    PLUS    shift, and go to state 122
    MINUS   shift, and go to state 123
    MULT    shift, and go to state 124
    DIV     shift, and go to state 125
    MOD     shift, and go to state 126
    RPAREN  shift, and go to state 141


State 110

   53 loop_stmt: WHILE expr COLON . INDENT block UNINDENT

    INDENT  shift, and go to state 142


State 111

   81 bin_op: expr OROR . expr

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 143
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 112

   82 bin_op: expr ANDAND . expr

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 144
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 113

   79 bin_op: expr OR . expr

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 145
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 114

   80 bin_op: expr XOR . expr

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 146
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 115

   78 bin_op: expr AND . expr

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 147
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 116

   83 bin_op: expr EQEQ . expr

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 148
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 117

   84 bin_op: expr NOTEQ . expr

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 149
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 118

   87 bin_op: expr LT . expr

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 150
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 119

   86 bin_op: expr LTEQ . expr

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 151
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 120

   88 bin_op: expr GT . expr

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 152
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 121

   85 bin_op: expr GTEQ . expr

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 153
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 122

   73 bin_op: expr PLUS . expr

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 154
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 123

   74 bin_op: expr MINUS . expr

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 155
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 124

   75 bin_op: expr MULT . expr

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 156
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 125

   76 bin_op: expr DIV . expr

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 157
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 126

   77 bin_op: expr MOD . expr

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 158
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 127

  104 array: id LBRACK . expr expr1 RBRACK

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 134
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 128

   52 loop_stmt: FOR id IN . loop_stmt1 COLON INDENT block UNINDENT

    RANGE  shift, and go to state 159
    ID     shift, and go to state 4

    $default  reduce using rule 54 (loop_stmt1)

    loop_stmt1  go to state 160
    id          go to state 161


State 129

   44 if_stmt: IF expr COLON . INDENT block UNINDENT if_stmt1

    INDENT  shift, and go to state 162


State 130

   48 case_stmt: CASE expr COLON . INDENT case_stmt1 UNINDENT
   49          | CASE expr COLON . INDENT case_stmt1 DEFAULT COLON INDENT block UNINDENT UNINDENT

    INDENT  shift, and go to state 163


State 131

   63 id1: COMMA . id id1

    ID  shift, and go to state 4

    id  go to state 164


State 132

   61 return_stmt: RETURN id id1 .

    $default  reduce using rule 61 (return_stmt)


State 133

   33 assignment: assignment_lhs EQ expr . expr1
   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    COMMA   shift, and go to state 165
    OROR    shift, and go to state 111
    ANDAND  shift, and go to state 112
    OR      shift, and go to state 113
    XOR     shift, and go to state 114
    AND     shift, and go to state 115
    EQEQ    shift, and go to state 116
    NOTEQ   shift, and go to state 117
    LT      shift, and go to state 118
    LTEQ    shift, and go to state 119
    GT      shift, and go to state 120
    GTEQ    shift, and go to state 121
    PLUS    shift, and go to state 122
    MINUS   shift, and go to state 123
    MULT    shift, and go to state 124
    DIV     shift, and go to state 125
    MOD     shift, and go to state 126

    $default  reduce using rule 37 (expr1)

    expr1  go to state 166


State 134

   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr
  104 array: id LBRACK expr . expr1 RBRACK

    COMMA   shift, and go to state 165
    OROR    shift, and go to state 111
    ANDAND  shift, and go to state 112
    OR      shift, and go to state 113
    XOR     shift, and go to state 114
    AND     shift, and go to state 115
    EQEQ    shift, and go to state 116
    NOTEQ   shift, and go to state 117
    LT      shift, and go to state 118
    LTEQ    shift, and go to state 119
    GT      shift, and go to state 120
    GTEQ    shift, and go to state 121
    PLUS    shift, and go to state 122
    MINUS   shift, and go to state 123
    MULT    shift, and go to state 124
    DIV     shift, and go to state 125
    MOD     shift, and go to state 126

    $default  reduce using rule 37 (expr1)

    expr1  go to state 167


State 135

   40 func_param: LPAREN RPAREN .

    $default  reduce using rule 40 (func_param)


State 136

   41 func_param: LPAREN expr . func_param1 RPAREN
   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    COMMA   shift, and go to state 168
    OROR    shift, and go to state 111
    ANDAND  shift, and go to state 112
    OR      shift, and go to state 113
    XOR     shift, and go to state 114
    AND     shift, and go to state 115
    EQEQ    shift, and go to state 116
    NOTEQ   shift, and go to state 117
    LT      shift, and go to state 118
    LTEQ    shift, and go to state 119
    GT      shift, and go to state 120
    GTEQ    shift, and go to state 121
    PLUS    shift, and go to state 122
    MINUS   shift, and go to state 123
    MULT    shift, and go to state 124
    DIV     shift, and go to state 125
    MOD     shift, and go to state 126

    $default  reduce using rule 42 (func_param1)

    func_param1  go to state 169


State 137

   18 func_dcl: id var_dcl func_dcl1 COLON INDENT block . UNINDENT

    UNINDENT  shift, and go to state 170


State 138

   13 ts_dcl1: COMMA type LT const_int GT . ts_dcl1

    COMMA  shift, and go to state 32

    $default  reduce using rule 12 (ts_dcl1)

    ts_dcl1  go to state 171


State 139

   11 ts_dcl: LBRACK type LT const_int GT ts_dcl1 RBRACK .

    $default  reduce using rule 11 (ts_dcl)


State 140

   16 func_dcl: ts_dcl id var_dcl func_dcl1 COLON INDENT block . UNINDENT

    UNINDENT  shift, and go to state 172


State 141

   64 expr: LPAREN expr RPAREN .

    $default  reduce using rule 64 (expr)


State 142

   53 loop_stmt: WHILE expr COLON INDENT . block UNINDENT

    WHILE     shift, and go to state 46
    FOR       shift, and go to state 47
    BREAK     shift, and go to state 48
    CONTINUE  shift, and go to state 49
    IF        shift, and go to state 50
    CASE      shift, and go to state 51
    RETURN    shift, and go to state 52
    ID        shift, and go to state 4

    $default  reduce using rule 22 (block1)

    var_dcl         go to state 53
    block           go to state 173
    block1          go to state 55
    statement       go to state 56
    assignment      go to state 57
    assignment_lhs  go to state 58
    func_call       go to state 59
    if_stmt         go to state 60
    case_stmt       go to state 61
    loop_stmt       go to state 62
    return_stmt     go to state 63
    id              go to state 64
    array           go to state 65


State 143

   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   81       | expr OROR expr .
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    OR     shift, and go to state 113
    XOR    shift, and go to state 114
    AND    shift, and go to state 115
    EQEQ   shift, and go to state 116
    NOTEQ  shift, and go to state 117
    LT     shift, and go to state 118
    LTEQ   shift, and go to state 119
    GT     shift, and go to state 120
    GTEQ   shift, and go to state 121
    PLUS   shift, and go to state 122
    MINUS  shift, and go to state 123
    MULT   shift, and go to state 124
    DIV    shift, and go to state 125
    MOD    shift, and go to state 126

    $default  reduce using rule 81 (bin_op)


State 144

   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   82       | expr ANDAND expr .
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    OR     shift, and go to state 113
    XOR    shift, and go to state 114
    AND    shift, and go to state 115
    EQEQ   shift, and go to state 116
    NOTEQ  shift, and go to state 117
    LT     shift, and go to state 118
    LTEQ   shift, and go to state 119
    GT     shift, and go to state 120
    GTEQ   shift, and go to state 121
    PLUS   shift, and go to state 122
    MINUS  shift, and go to state 123
    MULT   shift, and go to state 124
    DIV    shift, and go to state 125
    MOD    shift, and go to state 126

    $default  reduce using rule 82 (bin_op)


State 145

   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   79       | expr OR expr .
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    $default  reduce using rule 79 (bin_op)


State 146

   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   80       | expr XOR expr .
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    $default  reduce using rule 80 (bin_op)


State 147

   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   78       | expr AND expr .
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    $default  reduce using rule 78 (bin_op)


State 148

   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   83       | expr EQEQ expr .
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    OR     shift, and go to state 113
    XOR    shift, and go to state 114
    AND    shift, and go to state 115
    LT     shift, and go to state 118
    LTEQ   shift, and go to state 119
    GT     shift, and go to state 120
    GTEQ   shift, and go to state 121
    PLUS   shift, and go to state 122
    MINUS  shift, and go to state 123
    MULT   shift, and go to state 124
    DIV    shift, and go to state 125
    MOD    shift, and go to state 126

    $default  reduce using rule 83 (bin_op)


State 149

   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   84       | expr NOTEQ expr .
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    OR     shift, and go to state 113
    XOR    shift, and go to state 114
    AND    shift, and go to state 115
    LT     shift, and go to state 118
    LTEQ   shift, and go to state 119
    GT     shift, and go to state 120
    GTEQ   shift, and go to state 121
    PLUS   shift, and go to state 122
    MINUS  shift, and go to state 123
    MULT   shift, and go to state 124
    DIV    shift, and go to state 125
    MOD    shift, and go to state 126

    $default  reduce using rule 84 (bin_op)


State 150

   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   87       | expr LT expr .
   88       | expr . GT expr

    OR     shift, and go to state 113
    XOR    shift, and go to state 114
    AND    shift, and go to state 115
    PLUS   shift, and go to state 122
    MINUS  shift, and go to state 123
    MULT   shift, and go to state 124
    DIV    shift, and go to state 125
    MOD    shift, and go to state 126

    $default  reduce using rule 87 (bin_op)


State 151

   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   86       | expr LTEQ expr .
   87       | expr . LT expr
   88       | expr . GT expr

    OR     shift, and go to state 113
    XOR    shift, and go to state 114
    AND    shift, and go to state 115
    PLUS   shift, and go to state 122
    MINUS  shift, and go to state 123
    MULT   shift, and go to state 124
    DIV    shift, and go to state 125
    MOD    shift, and go to state 126

    $default  reduce using rule 86 (bin_op)


State 152

   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr
   88       | expr GT expr .

    OR     shift, and go to state 113
    XOR    shift, and go to state 114
    AND    shift, and go to state 115
    PLUS   shift, and go to state 122
    MINUS  shift, and go to state 123
    MULT   shift, and go to state 124
    DIV    shift, and go to state 125
    MOD    shift, and go to state 126

    $default  reduce using rule 88 (bin_op)


State 153

   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   85       | expr GTEQ expr .
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    OR     shift, and go to state 113
    XOR    shift, and go to state 114
    AND    shift, and go to state 115
    PLUS   shift, and go to state 122
    MINUS  shift, and go to state 123
    MULT   shift, and go to state 124
    DIV    shift, and go to state 125
    MOD    shift, and go to state 126

    $default  reduce using rule 85 (bin_op)


State 154

   73 bin_op: expr . PLUS expr
   73       | expr PLUS expr .
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    OR    shift, and go to state 113
    XOR   shift, and go to state 114
    AND   shift, and go to state 115
    MULT  shift, and go to state 124
    DIV   shift, and go to state 125
    MOD   shift, and go to state 126

    $default  reduce using rule 73 (bin_op)


State 155

   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   74       | expr MINUS expr .
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    OR    shift, and go to state 113
    XOR   shift, and go to state 114
    AND   shift, and go to state 115
    MULT  shift, and go to state 124
    DIV   shift, and go to state 125
    MOD   shift, and go to state 126

    $default  reduce using rule 74 (bin_op)


State 156

   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   75       | expr MULT expr .
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    OR   shift, and go to state 113
    XOR  shift, and go to state 114
    AND  shift, and go to state 115

    $default  reduce using rule 75 (bin_op)


State 157

   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   76       | expr DIV expr .
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    OR   shift, and go to state 113
    XOR  shift, and go to state 114
    AND  shift, and go to state 115

    $default  reduce using rule 76 (bin_op)


State 158

   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   77       | expr MOD expr .
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    OR   shift, and go to state 113
    XOR  shift, and go to state 114
    AND  shift, and go to state 115

    $default  reduce using rule 77 (bin_op)


State 159

   56 loop_stmt1: RANGE . loop_stmt2
   57           | RANGE . loop_stmt2 TO loop_stmt2

    ID         shift, and go to state 4
    CONST_INT  shift, and go to state 41

    loop_stmt2  go to state 174
    const_int   go to state 175
    id          go to state 176


State 160

   52 loop_stmt: FOR id IN loop_stmt1 . COLON INDENT block UNINDENT

    COLON  shift, and go to state 177


State 161

   55 loop_stmt1: id .

    $default  reduce using rule 55 (loop_stmt1)


State 162

   44 if_stmt: IF expr COLON INDENT . block UNINDENT if_stmt1

    WHILE     shift, and go to state 46
    FOR       shift, and go to state 47
    BREAK     shift, and go to state 48
    CONTINUE  shift, and go to state 49
    IF        shift, and go to state 50
    CASE      shift, and go to state 51
    RETURN    shift, and go to state 52
    ID        shift, and go to state 4

    $default  reduce using rule 22 (block1)

    var_dcl         go to state 53
    block           go to state 178
    block1          go to state 55
    statement       go to state 56
    assignment      go to state 57
    assignment_lhs  go to state 58
    func_call       go to state 59
    if_stmt         go to state 60
    case_stmt       go to state 61
    loop_stmt       go to state 62
    return_stmt     go to state 63
    id              go to state 64
    array           go to state 65


State 163

   48 case_stmt: CASE expr COLON INDENT . case_stmt1 UNINDENT
   49          | CASE expr COLON INDENT . case_stmt1 DEFAULT COLON INDENT block UNINDENT UNINDENT

    CONST_INT  shift, and go to state 41

    $default  reduce using rule 50 (case_stmt1)

    case_stmt1  go to state 179
    const_int   go to state 180


State 164

   63 id1: COMMA id . id1

    COMMA  shift, and go to state 131

    $default  reduce using rule 62 (id1)

    id1  go to state 181


State 165

   38 expr1: COMMA . expr expr1

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 182
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 166

   33 assignment: assignment_lhs EQ expr expr1 .

    $default  reduce using rule 33 (assignment)


State 167

  104 array: id LBRACK expr expr1 . RBRACK

    RBRACK  shift, and go to state 183


State 168

   43 func_param1: COMMA . expr func_param1

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 184
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 169

   41 func_param: LPAREN expr func_param1 . RPAREN

    RPAREN  shift, and go to state 185


State 170

   18 func_dcl: id var_dcl func_dcl1 COLON INDENT block UNINDENT .

    $default  reduce using rule 18 (func_dcl)


State 171

   13 ts_dcl1: COMMA type LT const_int GT ts_dcl1 .

    $default  reduce using rule 13 (ts_dcl1)


State 172

   16 func_dcl: ts_dcl id var_dcl func_dcl1 COLON INDENT block UNINDENT .

    $default  reduce using rule 16 (func_dcl)


State 173

   53 loop_stmt: WHILE expr COLON INDENT block . UNINDENT

    UNINDENT  shift, and go to state 186


State 174

   56 loop_stmt1: RANGE loop_stmt2 .
   57           | RANGE loop_stmt2 . TO loop_stmt2

    TO  shift, and go to state 187

    $default  reduce using rule 56 (loop_stmt1)


State 175

   58 loop_stmt2: const_int .

    $default  reduce using rule 58 (loop_stmt2)


State 176

   59 loop_stmt2: id .

    $default  reduce using rule 59 (loop_stmt2)


State 177

   52 loop_stmt: FOR id IN loop_stmt1 COLON . INDENT block UNINDENT

    INDENT  shift, and go to state 188


State 178

   44 if_stmt: IF expr COLON INDENT block . UNINDENT if_stmt1

    UNINDENT  shift, and go to state 189


State 179

   48 case_stmt: CASE expr COLON INDENT case_stmt1 . UNINDENT
   49          | CASE expr COLON INDENT case_stmt1 . DEFAULT COLON INDENT block UNINDENT UNINDENT

    UNINDENT  shift, and go to state 190
    DEFAULT   shift, and go to state 191


State 180

   51 case_stmt1: const_int . COLON INDENT block UNINDENT case_stmt1

    COLON  shift, and go to state 192


State 181

   63 id1: COMMA id id1 .

    $default  reduce using rule 63 (id1)


State 182

   38 expr1: COMMA expr . expr1
   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    COMMA   shift, and go to state 165
    OROR    shift, and go to state 111
    ANDAND  shift, and go to state 112
    OR      shift, and go to state 113
    XOR     shift, and go to state 114
    AND     shift, and go to state 115
    EQEQ    shift, and go to state 116
    NOTEQ   shift, and go to state 117
    LT      shift, and go to state 118
    LTEQ    shift, and go to state 119
    GT      shift, and go to state 120
    GTEQ    shift, and go to state 121
    PLUS    shift, and go to state 122
    MINUS   shift, and go to state 123
    MULT    shift, and go to state 124
    DIV     shift, and go to state 125
    MOD     shift, and go to state 126

    $default  reduce using rule 37 (expr1)

    expr1  go to state 193


State 183

  104 array: id LBRACK expr expr1 RBRACK .

    $default  reduce using rule 104 (array)


State 184

   43 func_param1: COMMA expr . func_param1
   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    COMMA   shift, and go to state 168
    OROR    shift, and go to state 111
    ANDAND  shift, and go to state 112
    OR      shift, and go to state 113
    XOR     shift, and go to state 114
    AND     shift, and go to state 115
    EQEQ    shift, and go to state 116
    NOTEQ   shift, and go to state 117
    LT      shift, and go to state 118
    LTEQ    shift, and go to state 119
    GT      shift, and go to state 120
    GTEQ    shift, and go to state 121
    PLUS    shift, and go to state 122
    MINUS   shift, and go to state 123
    MULT    shift, and go to state 124
    DIV     shift, and go to state 125
    MOD     shift, and go to state 126

    $default  reduce using rule 42 (func_param1)

    func_param1  go to state 194


State 185

   41 func_param: LPAREN expr func_param1 RPAREN .

    $default  reduce using rule 41 (func_param)


State 186

   53 loop_stmt: WHILE expr COLON INDENT block UNINDENT .

    $default  reduce using rule 53 (loop_stmt)


State 187

   57 loop_stmt1: RANGE loop_stmt2 TO . loop_stmt2

    ID         shift, and go to state 4
    CONST_INT  shift, and go to state 41

    loop_stmt2  go to state 195
    const_int   go to state 175
    id          go to state 176


State 188

   52 loop_stmt: FOR id IN loop_stmt1 COLON INDENT . block UNINDENT

    WHILE     shift, and go to state 46
    FOR       shift, and go to state 47
    BREAK     shift, and go to state 48
    CONTINUE  shift, and go to state 49
    IF        shift, and go to state 50
    CASE      shift, and go to state 51
    RETURN    shift, and go to state 52
    ID        shift, and go to state 4

    $default  reduce using rule 22 (block1)

    var_dcl         go to state 53
    block           go to state 196
    block1          go to state 55
    statement       go to state 56
    assignment      go to state 57
    assignment_lhs  go to state 58
    func_call       go to state 59
    if_stmt         go to state 60
    case_stmt       go to state 61
    loop_stmt       go to state 62
    return_stmt     go to state 63
    id              go to state 64
    array           go to state 65


State 189

   44 if_stmt: IF expr COLON INDENT block UNINDENT . if_stmt1

    ELSE  shift, and go to state 197
    ELIF  shift, and go to state 198

    $default  reduce using rule 45 (if_stmt1)

    if_stmt1  go to state 199


State 190

   48 case_stmt: CASE expr COLON INDENT case_stmt1 UNINDENT .

    $default  reduce using rule 48 (case_stmt)


State 191

   49 case_stmt: CASE expr COLON INDENT case_stmt1 DEFAULT . COLON INDENT block UNINDENT UNINDENT

    COLON  shift, and go to state 200


State 192

   51 case_stmt1: const_int COLON . INDENT block UNINDENT case_stmt1

    INDENT  shift, and go to state 201


State 193

   38 expr1: COMMA expr expr1 .

    $default  reduce using rule 38 (expr1)


State 194

   43 func_param1: COMMA expr func_param1 .

    $default  reduce using rule 43 (func_param1)


State 195

   57 loop_stmt1: RANGE loop_stmt2 TO loop_stmt2 .

    $default  reduce using rule 57 (loop_stmt1)


State 196

   52 loop_stmt: FOR id IN loop_stmt1 COLON INDENT block . UNINDENT

    UNINDENT  shift, and go to state 202


State 197

   46 if_stmt1: ELSE . COLON INDENT block UNINDENT

    COLON  shift, and go to state 203


State 198

   47 if_stmt1: ELIF . expr COLON INDENT block UNINDENT if_stmt1

    NOT           shift, and go to state 73
    MINUS         shift, and go to state 74
    COMP          shift, and go to state 75
    LPAREN        shift, and go to state 76
    ID            shift, and go to state 4
    CONST_INT     shift, and go to state 41
    CONST_REAL    shift, and go to state 77
    CONST_CHAR    shift, and go to state 78
    CONST_STRING  shift, and go to state 79
    CONST_LONG    shift, and go to state 80
    TRUE          shift, and go to state 81
    FALSE         shift, and go to state 82

    func_call  go to state 83
    expr       go to state 204
    bin_op     go to state 85
    const_val  go to state 86
    const_int  go to state 87
    id         go to state 88
    array      go to state 89


State 199

   44 if_stmt: IF expr COLON INDENT block UNINDENT if_stmt1 .

    $default  reduce using rule 44 (if_stmt)


State 200

   49 case_stmt: CASE expr COLON INDENT case_stmt1 DEFAULT COLON . INDENT block UNINDENT UNINDENT

    INDENT  shift, and go to state 205


State 201

   51 case_stmt1: const_int COLON INDENT . block UNINDENT case_stmt1

    WHILE     shift, and go to state 46
    FOR       shift, and go to state 47
    BREAK     shift, and go to state 48
    CONTINUE  shift, and go to state 49
    IF        shift, and go to state 50
    CASE      shift, and go to state 51
    RETURN    shift, and go to state 52
    ID        shift, and go to state 4

    $default  reduce using rule 22 (block1)

    var_dcl         go to state 53
    block           go to state 206
    block1          go to state 55
    statement       go to state 56
    assignment      go to state 57
    assignment_lhs  go to state 58
    func_call       go to state 59
    if_stmt         go to state 60
    case_stmt       go to state 61
    loop_stmt       go to state 62
    return_stmt     go to state 63
    id              go to state 64
    array           go to state 65


State 202

   52 loop_stmt: FOR id IN loop_stmt1 COLON INDENT block UNINDENT .

    $default  reduce using rule 52 (loop_stmt)


State 203

   46 if_stmt1: ELSE COLON . INDENT block UNINDENT

    INDENT  shift, and go to state 207


State 204

   47 if_stmt1: ELIF expr . COLON INDENT block UNINDENT if_stmt1
   73 bin_op: expr . PLUS expr
   74       | expr . MINUS expr
   75       | expr . MULT expr
   76       | expr . DIV expr
   77       | expr . MOD expr
   78       | expr . AND expr
   79       | expr . OR expr
   80       | expr . XOR expr
   81       | expr . OROR expr
   82       | expr . ANDAND expr
   83       | expr . EQEQ expr
   84       | expr . NOTEQ expr
   85       | expr . GTEQ expr
   86       | expr . LTEQ expr
   87       | expr . LT expr
   88       | expr . GT expr

    COLON   shift, and go to state 208
    OROR    shift, and go to state 111
    ANDAND  shift, and go to state 112
    OR      shift, and go to state 113
    XOR     shift, and go to state 114
    AND     shift, and go to state 115
    EQEQ    shift, and go to state 116
    NOTEQ   shift, and go to state 117
    LT      shift, and go to state 118
    LTEQ    shift, and go to state 119
    GT      shift, and go to state 120
    GTEQ    shift, and go to state 121
    PLUS    shift, and go to state 122
    MINUS   shift, and go to state 123
    MULT    shift, and go to state 124
    DIV     shift, and go to state 125
    MOD     shift, and go to state 126


State 205

   49 case_stmt: CASE expr COLON INDENT case_stmt1 DEFAULT COLON INDENT . block UNINDENT UNINDENT

    WHILE     shift, and go to state 46
    FOR       shift, and go to state 47
    BREAK     shift, and go to state 48
    CONTINUE  shift, and go to state 49
    IF        shift, and go to state 50
    CASE      shift, and go to state 51
    RETURN    shift, and go to state 52
    ID        shift, and go to state 4

    $default  reduce using rule 22 (block1)

    var_dcl         go to state 53
    block           go to state 209
    block1          go to state 55
    statement       go to state 56
    assignment      go to state 57
    assignment_lhs  go to state 58
    func_call       go to state 59
    if_stmt         go to state 60
    case_stmt       go to state 61
    loop_stmt       go to state 62
    return_stmt     go to state 63
    id              go to state 64
    array           go to state 65


State 206

   51 case_stmt1: const_int COLON INDENT block . UNINDENT case_stmt1

    UNINDENT  shift, and go to state 210


State 207

   46 if_stmt1: ELSE COLON INDENT . block UNINDENT

    WHILE     shift, and go to state 46
    FOR       shift, and go to state 47
    BREAK     shift, and go to state 48
    CONTINUE  shift, and go to state 49
    IF        shift, and go to state 50
    CASE      shift, and go to state 51
    RETURN    shift, and go to state 52
    ID        shift, and go to state 4

    $default  reduce using rule 22 (block1)

    var_dcl         go to state 53
    block           go to state 211
    block1          go to state 55
    statement       go to state 56
    assignment      go to state 57
    assignment_lhs  go to state 58
    func_call       go to state 59
    if_stmt         go to state 60
    case_stmt       go to state 61
    loop_stmt       go to state 62
    return_stmt     go to state 63
    id              go to state 64
    array           go to state 65


State 208

   47 if_stmt1: ELIF expr COLON . INDENT block UNINDENT if_stmt1

    INDENT  shift, and go to state 212


State 209

   49 case_stmt: CASE expr COLON INDENT case_stmt1 DEFAULT COLON INDENT block . UNINDENT UNINDENT

    UNINDENT  shift, and go to state 213


State 210

   51 case_stmt1: const_int COLON INDENT block UNINDENT . case_stmt1

    CONST_INT  shift, and go to state 41

    $default  reduce using rule 50 (case_stmt1)

    case_stmt1  go to state 214
    const_int   go to state 180


State 211

   46 if_stmt1: ELSE COLON INDENT block . UNINDENT

    UNINDENT  shift, and go to state 215


State 212

   47 if_stmt1: ELIF expr COLON INDENT . block UNINDENT if_stmt1

    WHILE     shift, and go to state 46
    FOR       shift, and go to state 47
    BREAK     shift, and go to state 48
    CONTINUE  shift, and go to state 49
    IF        shift, and go to state 50
    CASE      shift, and go to state 51
    RETURN    shift, and go to state 52
    ID        shift, and go to state 4

    $default  reduce using rule 22 (block1)

    var_dcl         go to state 53
    block           go to state 216
    block1          go to state 55
    statement       go to state 56
    assignment      go to state 57
    assignment_lhs  go to state 58
    func_call       go to state 59
    if_stmt         go to state 60
    case_stmt       go to state 61
    loop_stmt       go to state 62
    return_stmt     go to state 63
    id              go to state 64
    array           go to state 65


State 213

   49 case_stmt: CASE expr COLON INDENT case_stmt1 DEFAULT COLON INDENT block UNINDENT . UNINDENT

    UNINDENT  shift, and go to state 217


State 214

   51 case_stmt1: const_int COLON INDENT block UNINDENT case_stmt1 .

    $default  reduce using rule 51 (case_stmt1)


State 215

   46 if_stmt1: ELSE COLON INDENT block UNINDENT .

    $default  reduce using rule 46 (if_stmt1)


State 216

   47 if_stmt1: ELIF expr COLON INDENT block . UNINDENT if_stmt1

    UNINDENT  shift, and go to state 218


State 217

   49 case_stmt: CASE expr COLON INDENT case_stmt1 DEFAULT COLON INDENT block UNINDENT UNINDENT .

    $default  reduce using rule 49 (case_stmt)


State 218

   47 if_stmt1: ELIF expr COLON INDENT block UNINDENT . if_stmt1

    ELSE  shift, and go to state 197
    ELIF  shift, and go to state 198

    $default  reduce using rule 45 (if_stmt1)

    if_stmt1  go to state 219


State 219

   47 if_stmt1: ELIF expr COLON INDENT block UNINDENT if_stmt1 .

    $default  reduce using rule 47 (if_stmt1)
